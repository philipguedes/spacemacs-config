;; Object botocore/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "botocore/"
  :tables
  (list
    (semanticdb-table "signers.py"
      :major-mode 'python-mode
      :tags 
        '( ("datetime" include nil nil [562 577])
            ("weakref" include nil nil [578 592])
            ("json" include nil nil [593 604])
            ("base64" include nil nil [605 618])
            ("botocore" include nil nil [620 635])
            ("botocore.auth" include nil nil [636 656])
            ("botocore.compat" include nil nil [657 701])
            ("botocore.awsrequest" include nil nil [702 777])
            ("botocore.exceptions" include nil nil [778 838])
            ("botocore.exceptions" include nil nil [839 895])
            ("botocore.exceptions" include nil nil [896 960])
            ("botocore.utils" include nil nil [961 1019])
            ("RequestSigner" type
               (:documentation "
    An object to sign requests before they go out over the wire using
    one of the authentication mechanisms defined in ``auth.py``. This
    class fires two events scoped to a service and operation name:

    * choose-signer: Allows overriding the auth signer name.
    * before-sign: Allows mutating the request before signing.

    Together these events allow for customization of the request
    signing pipeline, including overrides, request path manipulation,
    and disabling signing per operation.

    :type service_name: string
    :param service_name: Name of the service, e.g. ``S3``

    :type region_name: string
    :param region_name: Name of the service region, e.g. ``us-east-1``

    :type signing_name: string
    :param signing_name: Service signing name. This is usually the
                         same as the service name, but can differ. E.g.
                         ``emr`` vs. ``elasticmapreduce``.

    :type signature_version: string
    :param signature_version: Signature name like ``v4``.

    :type credentials: :py:class:`~botocore.credentials.Credentials`
    :param credentials: User credentials with which to sign requests.

    :type event_emitter: :py:class:`~botocore.hooks.BaseEventHooks`
    :param event_emitter: Extension mechanism to fire events.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2502 2535])
                            ("self" variable nil (reparse-symbol indented_block_body) [2544 2575])
                            ("self" variable nil (reparse-symbol indented_block_body) [2584 2617])
                            ("self" variable nil (reparse-symbol indented_block_body) [2626 2669])
                            ("self" variable nil (reparse-symbol indented_block_body) [2678 2709])
                            ("self" variable nil (reparse-symbol indented_block_body) [2798 2848]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2382 2386])
                            ("service_name" variable nil (reparse-symbol function_parameters) [2388 2400])
                            ("region_name" variable nil (reparse-symbol function_parameters) [2402 2413])
                            ("signing_name" variable nil (reparse-symbol function_parameters) [2415 2427])
                            ("signature_version" variable nil (reparse-symbol function_parameters) [2446 2463])
                            ("credentials" variable nil (reparse-symbol function_parameters) [2465 2476])
                            ("event_emitter" variable nil (reparse-symbol function_parameters) [2478 2491]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2369 2849])
                    ("region_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2884 2888]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2854 2924])
                    ("signature_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2965 2969]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2929 3011])
                    ("signing_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3047 3051]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3016 3088])
                    ("handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3105 3109])
                            ("operation_name" variable nil (reparse-symbol function_parameters) [3111 3125])
                            ("request" variable nil (reparse-symbol function_parameters) [3132 3139])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3146 3154]))                          )
                        (reparse-symbol indented_block_body) [3093 3445])
                    ("sign" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3459 3463])
                            ("operation_name" variable nil (reparse-symbol function_parameters) [3465 3479])
                            ("request" variable nil (reparse-symbol function_parameters) [3481 3488])
                            ("region_name" variable nil (reparse-symbol function_parameters) [3490 3501])
                            ("signing_type" variable nil (reparse-symbol function_parameters) [3521 3533])
                            ("expires_in" variable nil (reparse-symbol function_parameters) [3546 3556])
                            ("signing_name" variable nil (reparse-symbol function_parameters) [3563 3575]))                          
                        :documentation "Sign a request before it goes out over the wire.

        :type operation_name: string
        :param operation_name: The name of the current operation, e.g.
                               ``ListBuckets``.
        :type request: AWSRequest
        :param request: The request object to be sent over the wire.

        :type region_name: str
        :param region_name: The region to sign the request for.

        :type signing_type: str
        :param signing_type: The type of signing to perform. This can be one of
            three possible values:

            * 'standard'     - This should be used for most requests.
            * 'presign-url'  - This should be used when pre-signing a request.
            * 'presign-post' - This should be used when pre-signing an S3 post.

        :type expires_in: int
        :param expires_in: The number of seconds the presigned url is valid
            for. This parameter is only valid for signing type 'presign-url'.

        :type signing_name: str
        :param signing_name: The name to use for the service when signing.
        ")
                        (reparse-symbol indented_block_body) [3450 5979])
                    ("_choose_signer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6003 6007])
                            ("operation_name" variable nil (reparse-symbol function_parameters) [6009 6023])
                            ("signing_type" variable nil (reparse-symbol function_parameters) [6025 6037])
                            ("context" variable nil (reparse-symbol function_parameters) [6039 6046]))                          
                        :documentation "
        Allow setting the signature version via the choose-signer event.
        A value of `botocore.UNSIGNED` means no signing will be performed.

        :param operation_name: The operation to sign.
        :param signing_type: The type of signing that the signer is to be used
            for.
        :return: The signature version to sign with.
        ")
                        (reparse-symbol indented_block_body) [5984 7523])
                    ("get_auth_instance" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7550 7554])
                            ("signing_name" variable nil (reparse-symbol function_parameters) [7556 7568])
                            ("region_name" variable nil (reparse-symbol function_parameters) [7570 7581])
                            ("signature_version" variable nil (reparse-symbol function_parameters) [7609 7626])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [7633 7641]))                          
                        :documentation "
        Get an auth instance which can be used to sign a request
        using the given signature version.

        :type signing_name: string
        :param signing_name: Service signing name. This is usually the
                             same as the service name, but can differ. E.g.
                             ``emr`` vs. ``elasticmapreduce``.

        :type region_name: string
        :param region_name: Name of the service region, e.g. ``us-east-1``

        :type signature_version: string
        :param signature_version: Signature name like ``v4``.

        :rtype: :py:class:`~botocore.auth.BaseSigner`
        :return: Auth instance to sign a request.
        ")
                        (reparse-symbol indented_block_body) [7528 9342])
                    ("get_auth" variable nil (reparse-symbol indented_block_body) [9397 9425])
                    ("generate_presigned_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9458 9462])
                            ("request_dict" variable nil (reparse-symbol function_parameters) [9464 9476])
                            ("operation_name" variable nil (reparse-symbol function_parameters) [9478 9492])
                            ("expires_in" variable nil (reparse-symbol function_parameters) [9525 9535])
                            ("region_name" variable nil (reparse-symbol function_parameters) [9542 9553])
                            ("signing_name" variable nil (reparse-symbol function_parameters) [9591 9603]))                          
                        :documentation "Generates a presigned url

        :type request_dict: dict
        :param request_dict: The prepared request dictionary returned by
            ``botocore.awsrequest.prepare_request_dict()``

        :type operation_name: str
        :param operation_name: The operation being signed.

        :type expires_in: int
        :param expires_in: The number of seconds the presigned url is valid
            for. By default it expires in an hour (3600 seconds)

        :type region_name: string
        :param region_name: The region name to sign the presigned url.

        :type signing_name: str
        :param signing_name: The name to use for the service when signing.

        :returns: The presigned url
        ")
                        (reparse-symbol indented_block_body) [9431 10566]))                  
                :type "class")
                nil [1022 10566])
            ("CloudFrontSigner" type
               (:superclasses ("object")
                :members 
                  ( ("'''A signer to create a signed CloudFront URL.

    First you create a cloudfront signer based on a normalized RSA signer::

        import rsa
        def rsa_signer(message):
            private_key = open('private_key.pem', 'r').read()
            return rsa.sign(
                message,
                rsa.PrivateKey.load_pkcs1(private_key.encode('utf8')),
                'SHA-1')  # CloudFront requires SHA-1 hash
        cf_signer = CloudFrontSigner(key_id, rsa_signer)

    To sign with a canned policy::

        signed_url = cf_signer.generate_signed_url(
            url, date_less_than=datetime(2015, 12, 1))

    To sign with a custom policy::

        signed_url = cf_signer.generate_signed_url(url, policy=my_policy)
    '''" code nil (reparse-symbol indented_block_body) [10604 11346])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create a CloudFrontSigner.

        :type key_id: str
        :param key_id: The CloudFront Key Pair ID

        :type rsa_signer: callable
        :param rsa_signer: An RSA signer.
               Its only input parameter will be the message to be signed,
               and its output will be the signed content as a binary string.
               The hash algorithm needed by CloudFront is SHA-1.
        \"\"\"" code nil (reparse-symbol indented_block_body) [11400 11812])
                            ("self" variable nil (reparse-symbol indented_block_body) [11821 11841])
                            ("self" variable nil (reparse-symbol indented_block_body) [11850 11878]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11365 11369])
                            ("key_id" variable nil (reparse-symbol function_parameters) [11371 11377])
                            ("rsa_signer" variable nil (reparse-symbol function_parameters) [11379 11389]))                          
                        :documentation "Create a CloudFrontSigner.

        :type key_id: str
        :param key_id: The CloudFront Key Pair ID

        :type rsa_signer: callable
        :param rsa_signer: An RSA signer.
               Its only input parameter will be the message to be signed,
               and its output will be the signed content as a binary string.
               The hash algorithm needed by CloudFront is SHA-1.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11352 11879])
                    ("generate_presigned_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11911 11915])
                            ("url" variable nil (reparse-symbol function_parameters) [11917 11920])
                            ("date_less_than" variable nil (reparse-symbol function_parameters) [11922 11936])
                            ("policy" variable nil (reparse-symbol function_parameters) [11943 11949]))                          
                        :documentation "Creates a signed CloudFront URL based on given parameters.

        :type url: str
        :param url: The URL of the protected object

        :type date_less_than: datetime
        :param date_less_than: The URL will expire after that date and time

        :type policy: str
        :param policy: The custom policy, possibly built by self.build_policy()

        :rtype: str
        :return: The signed URL.
        ")
                        (reparse-symbol indented_block_body) [11884 13348])
                    ("_build_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13368 13372])
                            ("base_url" variable nil (reparse-symbol function_parameters) [13374 13382])
                            ("extra_params" variable nil (reparse-symbol function_parameters) [13384 13396]))                          )
                        (reparse-symbol indented_block_body) [13353 13512])
                    ("build_policy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13534 13538])
                            ("resource" variable nil (reparse-symbol function_parameters) [13540 13548])
                            ("date_less_than" variable nil (reparse-symbol function_parameters) [13550 13564])
                            ("date_greater_than" variable nil (reparse-symbol function_parameters) [13587 13604])
                            ("ip_address" variable nil (reparse-symbol function_parameters) [13611 13621]))                          
                        :documentation "A helper to build policy.

        :type resource: str
        :param resource: The URL or the stream filename of the protected object

        :type date_less_than: datetime
        :param date_less_than: The URL will expire after the time has passed

        :type date_greater_than: datetime
        :param date_greater_than: The URL will not be valid until this time

        :type ip_address: str
        :param ip_address: Use 'x.x.x.x' for an IP, or 'x.x.x.x/x' for a subnet

        :rtype: str
        :return: The policy in a compact string.
        ")
                        (reparse-symbol indented_block_body) [13517 15661])
                    ("_url_b64encode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15685 15689])
                            ("data" variable nil (reparse-symbol function_parameters) [15691 15695]))                          )
                        (reparse-symbol indented_block_body) [15666 15964]))                  
                :type "class")
                nil [10568 15964])
            ("add_generate_db_auth_token" function (:arguments 
              ( ("class_attributes" variable nil (reparse-symbol function_parameters) [15997 16013])
                ("kwargs" variable nil (reparse-symbol function_parameters) [16015 16023]))              ) nil [15966 16098])
            ("generate_db_auth_token" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [16127 16131])
                    ("DBHostname" variable nil (reparse-symbol function_parameters) [16133 16143])
                    ("Port" variable nil (reparse-symbol function_parameters) [16145 16149])
                    ("DBUsername" variable nil (reparse-symbol function_parameters) [16151 16161])
                    ("Region" variable nil (reparse-symbol function_parameters) [16163 16169]))                  
                :documentation "Generates an auth token used to connect to a db with IAM credentials.

    :type DBHostname: str
    :param DBHostname: The hostname of the database to connect to.

    :type Port: int
    :param Port: The port number the database is listening on.

    :type DBUsername: str
    :param DBUsername: The username to log in as.

    :type Region: str
    :param Region: The region the database is in. If None, the client
        region will be used.

    :return: A presigned url which can be used as an auth token.
    ")
                nil [16100 17840])
            ("S3PostPresigner" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [17921 17958]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17890 17894])
                            ("request_signer" variable nil (reparse-symbol function_parameters) [17896 17910]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17877 17959])
                    ("generate_presigned_post" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17992 17996])
                            ("request_dict" variable nil (reparse-symbol function_parameters) [17998 18010])
                            ("fields" variable nil (reparse-symbol function_parameters) [18012 18018])
                            ("conditions" variable nil (reparse-symbol function_parameters) [18057 18067])
                            ("expires_in" variable nil (reparse-symbol function_parameters) [18074 18084])
                            ("region_name" variable nil (reparse-symbol function_parameters) [18123 18134]))                          
                        :documentation "Generates the url and the form fields used for a presigned s3 post

        :type request_dict: dict
        :param request_dict: The prepared request dictionary returned by
            ``botocore.awsrequest.prepare_request_dict()``

        :type fields: dict
        :param fields: A dictionary of prefilled form fields to build on top
            of.

        :type conditions: list
        :param conditions: A list of conditions to include in the policy. Each
            element can be either a list or a structure. For example:
            [
             {\"acl\": \"public-read\"},
             {\"bucket\": \"mybucket\"},
             [\"starts-with\", \"$key\", \"mykey\"]
            ]

        :type expires_in: int
        :param expires_in: The number of seconds the presigned post is valid
            for.

        :type region_name: string
        :param region_name: The region name to sign the presigned post to.

        :rtype: dict
        :returns: A dictionary with two elements: ``url`` and ``fields``.
            Url is the url to post to. Fields is a dictionary filled with
            the form fields and respective values to use when submitting the
            post. For example:

            {'url': 'https://mybucket.s3.amazonaws.com
             'fields': {'acl': 'public-read',
                        'key': 'mykey',
                        'signature': 'mysignature',
                        'policy': 'mybase64 encoded policy'}
            }
        ")
                        (reparse-symbol indented_block_body) [17964 20699]))                  
                :type "class")
                nil [17842 20699])
            ("add_generate_presigned_url" function (:arguments 
              ( ("class_attributes" variable nil (reparse-symbol function_parameters) [20732 20748])
                ("kwargs" variable nil (reparse-symbol function_parameters) [20750 20758]))              ) nil [20701 20833])
            ("generate_presigned_url" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [20862 20866])
                    ("ClientMethod" variable nil (reparse-symbol function_parameters) [20868 20880])
                    ("Params" variable nil (reparse-symbol function_parameters) [20882 20888])
                    ("ExpiresIn" variable nil (reparse-symbol function_parameters) [20895 20904])
                    ("HttpMethod" variable nil (reparse-symbol function_parameters) [20938 20948]))                  
                :documentation "Generate a presigned url given a client, its method, and arguments

    :type ClientMethod: string
    :param ClientMethod: The client method to presign for

    :type Params: dict
    :param Params: The parameters normally passed to
        ``ClientMethod``.

    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid
        for. By default it expires in an hour (3600 seconds)

    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By
        default, the http method is whatever is used in the method's model.

    :returns: The presigned url
    ")
                nil [20835 22650])
            ("add_generate_presigned_post" function (:arguments 
              ( ("class_attributes" variable nil (reparse-symbol function_parameters) [22684 22700])
                ("kwargs" variable nil (reparse-symbol function_parameters) [22702 22710]))              ) nil [22652 22787])
            ("generate_presigned_post" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [22817 22821])
                    ("Bucket" variable nil (reparse-symbol function_parameters) [22823 22829])
                    ("Key" variable nil (reparse-symbol function_parameters) [22831 22834])
                    ("Fields" variable nil (reparse-symbol function_parameters) [22836 22842])
                    ("Conditions" variable nil (reparse-symbol function_parameters) [22849 22859])
                    ("ExpiresIn" variable nil (reparse-symbol function_parameters) [22894 22903]))                  
                :documentation "Builds the url and the form fields used for a presigned s3 post

    :type Bucket: string
    :param Bucket: The name of the bucket to presign the post to. Note that
        bucket related conditions should not be included in the
        ``conditions`` parameter.

    :type Key: string
    :param Key: Key name, optionally add ${filename} to the end to
        attach the submitted filename. Note that key related conditions and
        fields are filled out for you and should not be included in the
        ``Fields`` or ``Conditions`` parameter.

    :type Fields: dict
    :param Fields: A dictionary of prefilled form fields to build on top
        of. Elements that may be included are acl, Cache-Control,
        Content-Type, Content-Disposition, Content-Encoding, Expires,
        success_action_redirect, redirect, success_action_status,
        and x-amz-meta-.

        Note that if a particular element is included in the fields
        dictionary it will not be automatically added to the conditions
        list. You must specify a condition for the element as well.

    :type Conditions: list
    :param Conditions: A list of conditions to include in the policy. Each
        element can be either a list or a structure. For example:

        [
         {\"acl\": \"public-read\"},
         [\"content-length-range\", 2, 5],
         [\"starts-with\", \"$success_action_redirect\", \"\"]
        ]

        Conditions that are included may pertain to acl,
        content-length-range, Cache-Control, Content-Type,
        Content-Disposition, Content-Encoding, Expires,
        success_action_redirect, redirect, success_action_status,
        and/or x-amz-meta-.

        Note that if you include a condition, you must specify
        the a valid value in the fields dictionary as well. A value will
        not be added automatically to the fields dictionary based on the
        conditions.

    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned post
        is valid for.

    :rtype: dict
    :returns: A dictionary with two elements: ``url`` and ``fields``.
        Url is the url to post to. Fields is a dictionary filled with
        the form fields and respective values to use when submitting the
        post. For example:

        {'url': 'https://mybucket.s3.amazonaws.com
         'fields': {'acl': 'public-read',
                    'key': 'mykey',
                    'signature': 'mysignature',
                    'policy': 'mybase64 encoded policy'}
        }
    ")
                nil [22789 26874]))          
      :file "signers.py"
      :pointmax 26874
      :fsize 26873
      :lastmodtime '(22858 51697 178173 303000)
      :unmatched-syntax '((NAME 13407 . 13416) (IF 13423 . 13425) (ELSE 13442 . 13446) (INDENT_BLOCK 5725 . 5943) (NEWLINE 5724 . 5725) (COLON 5723 . 5724) (TRY 5610 . 5613) (AS 5719 . 5721)))
    (semanticdb-table "awsrequest.py"
      :major-mode 'python-mode
      :tags 
        '( ("sys" include nil nil [627 637])
            ("logging" include nil nil [638 652])
            ("select" include nil nil [653 666])
            ("functools" include nil nil [667 683])
            ("socket" include nil nil [684 697])
            ("inspect" include nil nil [698 712])
            ("botocore.compat" include nil nil [714 745])
            ("botocore.compat" include nil nil [746 836])
            ("botocore.exceptions" include nil nil [837 890])
            ("botocore.utils" include nil nil [891 941])
            ("botocore.vendored.requests" include nil nil [942 987])
            ("botocore.vendored.requests.sessions" include nil nil [988 1050])
            ("botocore.vendored.requests.packages.urllib3.connection" include nil nil [1051 1147])
            ("botocore.vendored.requests.packages.urllib3.connection" include nil nil [1148 1235])
            ("botocore.vendored.requests.packages.urllib3.connectionpool" include nil nil [1236 1331])
            ("botocore.vendored.requests.packages.urllib3.connectionpool" include nil nil [1332 1428])
            ("logger" variable nil nil [1431 1467])
            ("AWSHTTPResponse" type
               (:superclasses ("HTTPResponse")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1664 1711])
                            ("HTTPResponse" code nil (reparse-symbol indented_block_body) [1720 1764]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1632 1636])
                            ("args" variable nil (reparse-symbol function_parameters) [1638 1643])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1645 1653]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1619 1765])
                    ("_read_status" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1787 1791]))                          )
                        (reparse-symbol indented_block_body) [1770 2018]))                  
                :type "class")
                nil [1470 2018])
            ("AWSHTTPConnection" type
               (:documentation "HTTPConnection that supports Expect 100-continue.

    This is conceptually a subclass of httplib.HTTPConnection (though
    technically we subclass from urllib3, which subclasses
    httplib.HTTPConnection) and we only override this class to support Expect
    100-continue, which we need for S3.  As far as I can tell, this is
    general purpose enough to not be specific to S3, but I'm being
    tentative and keeping it in botocore because I've only tested
    this against AWS services.

    "
                :superclasses ("HTTPConnection")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HTTPConnection" code nil (reparse-symbol indented_block_body) [2619 2665])
                            ("self" variable nil (reparse-symbol indented_block_body) [2674 2723])
                            ("self" variable nil (reparse-symbol indented_block_body) [3315 3346])
                            ("self" variable nil (reparse-symbol indented_block_body) [3355 3386]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2587 2591])
                            ("args" variable nil (reparse-symbol function_parameters) [2593 2598])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [2600 2608]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2574 3387])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3402 3406]))                          )
                        (reparse-symbol indented_block_body) [3392 3642])
                    ("_tunnel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3659 3663]))                          )
                        (reparse-symbol indented_block_body) [3647 5088])
                    ("_send_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5111 5115])
                            ("method" variable nil (reparse-symbol function_parameters) [5117 5123])
                            ("url" variable nil (reparse-symbol function_parameters) [5125 5128])
                            ("body" variable nil (reparse-symbol function_parameters) [5130 5134])
                            ("headers" variable nil (reparse-symbol function_parameters) [5136 5143])
                            ("args" variable nil (reparse-symbol function_parameters) [5145 5150])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [5152 5160]))                          )
                        (reparse-symbol indented_block_body) [5093 5592])
                    ("_convert_to_bytes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5619 5623])
                            ("mixed_buffer" variable nil (reparse-symbol function_parameters) [5625 5637]))                          )
                        (reparse-symbol indented_block_body) [5597 6081])
                    ("_send_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6103 6107])
                            ("message_body" variable nil (reparse-symbol function_parameters) [6109 6121])
                            ("args" variable nil (reparse-symbol function_parameters) [6128 6133])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [6135 6143]))                          )
                        (reparse-symbol indented_block_body) [6086 8035])
                    ("_consume_headers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8061 8065])
                            ("fp" variable nil (reparse-symbol function_parameters) [8067 8069]))                          )
                        (reparse-symbol indented_block_body) [8040 8602])
                    ("_handle_expect_response" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8635 8639])
                            ("message_body" variable nil (reparse-symbol function_parameters) [8641 8653]))                          )
                        (reparse-symbol indented_block_body) [8607 10542])
                    ("_send_message_body" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10570 10574])
                            ("message_body" variable nil (reparse-symbol function_parameters) [10576 10588]))                          )
                        (reparse-symbol indented_block_body) [10547 10664])
                    ("send" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10678 10682])
                            ("str" variable nil (reparse-symbol function_parameters) [10684 10687]))                          )
                        (reparse-symbol indented_block_body) [10669 10912])
                    ("_is_100_continue_status" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10945 10949])
                            ("maybe_status_line" variable nil (reparse-symbol function_parameters) [10951 10968]))                          )
                        (reparse-symbol indented_block_body) [10917 11187]))                  
                :type "class")
                nil [2020 11187])
            ("AWSHTTPSConnection" type
               (:superclasses ("VerifiedHTTPSConnection")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [11244 11248]))                  
                :type "class")
                nil [11189 11249])
            ("for" code nil nil [11434 11581])
            ("prepare_request_dict" function
               (:documentation "
    This method prepares a request dict to be created into an
    AWSRequestObject. This prepares the request dict by adding the
    url and the user agent to the request dict.

    :type request_dict: dict
    :param request_dict:  The request dict (created from the
        ``serialize`` module).

    :type user_agent: string
    :param user_agent: The user agent to use for this request.

    :type endpoint_url: string
    :param endpoint_url: The full endpoint url, which contains at least
        the scheme, the hostname, and optionally any path components.
    "
                :arguments 
                  ( ("request_dict" variable nil (reparse-symbol function_parameters) [11608 11620])
                    ("endpoint_url" variable nil (reparse-symbol function_parameters) [11622 11634])
                    ("context" variable nil (reparse-symbol function_parameters) [11636 11643])
                    ("user_agent" variable nil (reparse-symbol function_parameters) [11675 11685]))                  )
                nil [11583 12782])
            ("create_request_object" function
               (:documentation "
    This method takes a request dict and creates an AWSRequest object
    from it.

    :type request_dict: dict
    :param request_dict:  The request dict (created from the
        ``prepare_request_dict`` method).

    :rtype: ``botocore.awsrequest.AWSRequest``
    :return: An AWSRequest object based on the request_dict.

    "
                :arguments 
                  ( ("request_dict" variable nil (reparse-symbol function_parameters) [12810 12822]))                  )
                nil [12784 13375])
            ("_urljoin" function (:arguments 
              ( ("endpoint_url" variable nil (reparse-symbol function_parameters) [13390 13402])
                ("url_path" variable nil (reparse-symbol function_parameters) [13404 13412]))              ) nil [13377 14051])
            ("AWSRequest" type
               (:superclasses ("models.RequestEncodingMixin" "models.Request")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [14165 14186])
                            ("if" code nil (reparse-symbol indented_block_body) [14195 14306])
                            ("models" code nil (reparse-symbol indented_block_body) [14314 14360])
                            ("headers" variable nil (reparse-symbol indented_block_body) [14369 14392])
                            ("if" code nil (reparse-symbol indented_block_body) [14401 14519])
                            ("self" variable nil (reparse-symbol indented_block_body) [14527 14549])
                            ("self" variable nil (reparse-symbol indented_block_body) [15045 15062]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14133 14137])
                            ("args" variable nil (reparse-symbol function_parameters) [14139 14144])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [14146 14154]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14120 15063])
                    ("prepare" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15080 15084]))                          
                        :documentation "Constructs a :class:`AWSPreparedRequest <AWSPreparedRequest>`.")
                        (reparse-symbol indented_block_body) [15068 15539])
                    ("body" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15567 15571]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15544 15799]))                  
                :type "class")
                nil [14053 15799])
            ("AWSPreparedRequest" type
               (:documentation "Represents a prepared request.

    :ivar method: HTTP Method
    :ivar url: The full url
    :ivar headers: The HTTP headers to send.
    :ivar body: The HTTP body.
    :ivar hooks: The set of callback hooks.

    In addition to the above attributes, the following attributes are
    available:

    :ivar query_params: The original query parameters.
    :ivar post_param: The original POST params (dict).

    "
                :superclasses ("models.PreparedRequest")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [16324 16356])
                            ("super" code nil (reparse-symbol indented_block_body) [16365 16407])
                            ("self" code nil (reparse-symbol indented_block_body) [16416 16504]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16291 16295])
                            ("original_request" variable nil (reparse-symbol function_parameters) [16297 16313]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16278 16505])
                    ("reset_stream_on_redirect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16539 16543])
                            ("response" variable nil (reparse-symbol function_parameters) [16545 16553])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [16555 16563]))                          )
                        (reparse-symbol indented_block_body) [16510 16783])
                    ("_looks_like_file" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16809 16813])
                            ("body" variable nil (reparse-symbol function_parameters) [16815 16819]))                          )
                        (reparse-symbol indented_block_body) [16788 16885])
                    ("reset_stream" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16907 16911]))                          )
                        (reparse-symbol indented_block_body) [16890 17648])
                    ("prepare_body" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17670 17674])
                            ("data" variable nil (reparse-symbol function_parameters) [17676 17680])
                            ("files" variable nil (reparse-symbol function_parameters) [17682 17687])
                            ("json" variable nil (reparse-symbol function_parameters) [17689 17693]))                          
                        :documentation "Prepares the given HTTP body data.")
                        (reparse-symbol indented_block_body) [17653 18768]))                  
                :type "class")
                nil [15801 18768])
            ("HTTPSConnectionPool" variable nil nil [18770 18824])
            ("HTTPConnectionPool" variable nil nil [18825 18877]))          
      :file "awsrequest.py"
      :pointmax 18878
      :fsize 18877
      :lastmodtime '(22858 51697 178173 303000)
      :unmatched-syntax '((INDENT_BLOCK 17524 . 17648) (NEWLINE 17523 . 17524) (COLON 17522 . 17523) (TRY 17398 . 17401) (AS 17518 . 17520) (INDENT_BLOCK 8566 . 8602) (NEWLINE 8565 . 8566) (WHILE 8540 . 8545) (STRING_LITERAL 8558 . 8564) (COLON 8564 . 8565) (INDENT_BLOCK 5318 . 5424) (NEWLINE 5317 . 5318) (COLON 5316 . 5317) (ELSE 5312 . 5316) (INDENT_BLOCK 5261 . 5304) (NEWLINE 5260 . 5261) (IF 5211 . 5213) (STRING_LITERAL 5245 . 5259) (COLON 5259 . 5260)))
    (semanticdb-table "serialize.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Protocol input serializes.

This module contains classes that implement input serialization
for the various AWS protocol types.

These classes essentially take user input, a model object that
represents what the expected input should look like, and it returns
a dictionary that contains the various parts of a request.  A few
high level design decisions:


* Each protocol type maps to a separate class, all inherit from
  ``Serializer``.
* The return value for ``serialize_to_request`` (the main entry
  point) returns a dictionary that represents a request.  This
  will have keys like ``url_path``, ``query_string``, etc.  This
  is done so that it's a) easy to test and b) not tied to a
  particular HTTP library.  See the ``serialize_to_request`` docstring
  for more details.

Unicode
-------

The input to the serializers should be text (str/unicode), not bytes,
with the exception of blob types.  Those are assumed to be binary,
and if a str/unicode type is passed in, it will be encoded as utf-8.
\"\"\"" code nil nil [562 1574])
            ("re" include nil nil [1575 1584])
            ("base64" include nil nil [1585 1598])
            ("xml.etree" include nil nil [1599 1632])
            ("calendar" include nil nil [1633 1648])
            ("botocore.compat" include nil nil [1650 1681])
            ("botocore.compat" include nil nil [1683 1727])
            ("botocore.utils" include nil nil [1728 1778])
            ("botocore.utils" include nil nil [1779 1820])
            ("botocore.utils" include nil nil [1821 1868])
            ("botocore" include nil nil [1869 1898])
            ("DEFAULT_TIMESTAMP_FORMAT" variable nil nil [1976 2012])
            ("ISO8601" variable nil nil [2013 2043])
            ("ISO8601_MICRO" variable nil nil [2095 2134])
            ("create_serializer" function (:arguments 
              ( ("protocol_name" variable nil (reparse-symbol function_parameters) [2159 2172])
                ("include_validation" variable nil (reparse-symbol function_parameters) [2174 2192]))              ) nil [2137 2450])
            ("Serializer" type
               (:superclasses ("object")
                :members 
                  ( ("DEFAULT_METHOD" variable nil (reparse-symbol indented_block_body) [2482 2505])
                    ("MAP_TYPE" variable nil (reparse-symbol indented_block_body) [2703 2718])
                    ("DEFAULT_ENCODING" variable nil (reparse-symbol indented_block_body) [2723 2749])
                    ("serialize_to_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2780 2784])
                            ("parameters" variable nil (reparse-symbol function_parameters) [2786 2796])
                            ("operation_model" variable nil (reparse-symbol function_parameters) [2798 2813]))                          
                        :documentation "Serialize parameters into an HTTP request.

        This method takes user provided parameters and a shape
        model and serializes the parameters to an HTTP request.
        More specifically, this method returns information about
        parts of the HTTP request, it does not enforce a particular
        interface or standard for an HTTP request.  It instead returns
        a dictionary of:

            * 'url_path'
            * 'query_string'
            * 'headers'
            * 'body'
            * 'method'

        It is then up to consumers to decide how to map this to a Request
        object of their HTTP library of choice.  Below is an example
        return value::

            {'body': {'Action': 'OperationName',
                      'Bar': 'val2',
                      'Foo': 'val1',
                      'Version': '2014-01-01'},
             'headers': {},
             'method': 'POST',
             'query_string': '',
             'url_path': '/'}

        :param parameters: The dictionary input parameters for the
            operation (i.e the user input).
        :param operation_model: The OperationModel object that describes
            the operation.
        ")
                        (reparse-symbol indented_block_body) [2755 4093])
                    ("_create_default_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4126 4130]))                          )
                        (reparse-symbol indented_block_body) [4098 4523])
                    ("_timestamp_iso8601" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4605 4609])
                            ("value" variable nil (reparse-symbol function_parameters) [4611 4616]))                          )
                        (reparse-symbol indented_block_body) [4582 4799])
                    ("_timestamp_unixtimestamp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4833 4837])
                            ("value" variable nil (reparse-symbol function_parameters) [4839 4844]))                          )
                        (reparse-symbol indented_block_body) [4804 4902])
                    ("_timestamp_rfc822" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4929 4933])
                            ("value" variable nil (reparse-symbol function_parameters) [4935 4940]))                          )
                        (reparse-symbol indented_block_body) [4907 4989])
                    ("_convert_timestamp_to_str" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5024 5028])
                            ("value" variable nil (reparse-symbol function_parameters) [5030 5035]))                          )
                        (reparse-symbol indented_block_body) [4994 5261])
                    ("_get_serialized_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5291 5295])
                            ("shape" variable nil (reparse-symbol function_parameters) [5297 5302])
                            ("default_name" variable nil (reparse-symbol function_parameters) [5304 5316]))                          )
                        (reparse-symbol indented_block_body) [5266 5509])
                    ("_get_base64" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5530 5534])
                            ("value" variable nil (reparse-symbol function_parameters) [5536 5541]))                          )
                        (reparse-symbol indented_block_body) [5514 5900]))                  
                :type "class")
                nil [2452 5900])
            ("QuerySerializer" type
               (:superclasses ("Serializer")
                :members 
                  ( ("TIMESTAMP_FORMAT" variable nil (reparse-symbol indented_block_body) [5942 5970])
                    ("serialize_to_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6001 6005])
                            ("parameters" variable nil (reparse-symbol function_parameters) [6007 6017])
                            ("operation_model" variable nil (reparse-symbol function_parameters) [6019 6034]))                          )
                        (reparse-symbol indented_block_body) [5976 6718])
                    ("_serialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6738 6742])
                            ("serialized" variable nil (reparse-symbol function_parameters) [6744 6754])
                            ("value" variable nil (reparse-symbol function_parameters) [6756 6761])
                            ("shape" variable nil (reparse-symbol function_parameters) [6763 6768])
                            ("prefix" variable nil (reparse-symbol function_parameters) [6770 6776]))                          )
                        (reparse-symbol indented_block_body) [6723 7340])
                    ("_serialize_type_structure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7375 7379])
                            ("serialized" variable nil (reparse-symbol function_parameters) [7381 7391])
                            ("value" variable nil (reparse-symbol function_parameters) [7393 7398])
                            ("shape" variable nil (reparse-symbol function_parameters) [7400 7405])
                            ("prefix" variable nil (reparse-symbol function_parameters) [7407 7413]))                          )
                        (reparse-symbol indented_block_body) [7345 7770])
                    ("_serialize_type_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7800 7804])
                            ("serialized" variable nil (reparse-symbol function_parameters) [7806 7816])
                            ("value" variable nil (reparse-symbol function_parameters) [7818 7823])
                            ("shape" variable nil (reparse-symbol function_parameters) [7825 7830])
                            ("prefix" variable nil (reparse-symbol function_parameters) [7832 7838]))                          )
                        (reparse-symbol indented_block_body) [7775 8683])
                    ("_serialize_type_map" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8712 8716])
                            ("serialized" variable nil (reparse-symbol function_parameters) [8718 8728])
                            ("value" variable nil (reparse-symbol function_parameters) [8730 8735])
                            ("shape" variable nil (reparse-symbol function_parameters) [8737 8742])
                            ("prefix" variable nil (reparse-symbol function_parameters) [8744 8750]))                          )
                        (reparse-symbol indented_block_body) [8688 9479])
                    ("_serialize_type_blob" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9509 9513])
                            ("serialized" variable nil (reparse-symbol function_parameters) [9515 9525])
                            ("value" variable nil (reparse-symbol function_parameters) [9527 9532])
                            ("shape" variable nil (reparse-symbol function_parameters) [9534 9539])
                            ("prefix" variable nil (reparse-symbol function_parameters) [9541 9547]))                          )
                        (reparse-symbol indented_block_body) [9484 9650])
                    ("_serialize_type_timestamp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9685 9689])
                            ("serialized" variable nil (reparse-symbol function_parameters) [9691 9701])
                            ("value" variable nil (reparse-symbol function_parameters) [9703 9708])
                            ("shape" variable nil (reparse-symbol function_parameters) [9710 9715])
                            ("prefix" variable nil (reparse-symbol function_parameters) [9717 9723]))                          )
                        (reparse-symbol indented_block_body) [9655 9796])
                    ("_serialize_type_boolean" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9829 9833])
                            ("serialized" variable nil (reparse-symbol function_parameters) [9835 9845])
                            ("value" variable nil (reparse-symbol function_parameters) [9847 9852])
                            ("shape" variable nil (reparse-symbol function_parameters) [9854 9859])
                            ("prefix" variable nil (reparse-symbol function_parameters) [9861 9867]))                          )
                        (reparse-symbol indented_block_body) [9801 9986])
                    ("_default_serialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10014 10018])
                            ("serialized" variable nil (reparse-symbol function_parameters) [10020 10030])
                            ("value" variable nil (reparse-symbol function_parameters) [10032 10037])
                            ("shape" variable nil (reparse-symbol function_parameters) [10039 10044])
                            ("prefix" variable nil (reparse-symbol function_parameters) [10046 10052]))                          )
                        (reparse-symbol indented_block_body) [9991 10093])
                    ("_is_shape_flattened" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10122 10126])
                            ("shape" variable nil (reparse-symbol function_parameters) [10128 10133]))                          )
                        (reparse-symbol indented_block_body) [10098 10188]))                  
                :type "class")
                nil [5902 10188])
            ("EC2Serializer" type
               (:documentation "EC2 specific customizations to the query protocol serializers.

    The EC2 model is almost, but not exactly, similar to the query protocol
    serializer.  This class encapsulates those differences.  The model
    will have be marked with a ``protocol`` of ``ec2``, so you don't need
    to worry about wiring this class up correctly.

    "
                :superclasses ("QuerySerializer")
                :members 
                  ( ("_get_serialized_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10610 10614])
                            ("shape" variable nil (reparse-symbol function_parameters) [10616 10621])
                            ("default_name" variable nil (reparse-symbol function_parameters) [10623 10635]))                          )
                        (reparse-symbol indented_block_body) [10585 11145])
                    ("_serialize_type_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11175 11179])
                            ("serialized" variable nil (reparse-symbol function_parameters) [11181 11191])
                            ("value" variable nil (reparse-symbol function_parameters) [11193 11198])
                            ("shape" variable nil (reparse-symbol function_parameters) [11200 11205])
                            ("prefix" variable nil (reparse-symbol function_parameters) [11207 11213]))                          )
                        (reparse-symbol indented_block_body) [11150 11438]))                  
                :type "class")
                nil [10190 11438])
            ("JSONSerializer" type
               (:superclasses ("Serializer")
                :members 
                  ( ("TIMESTAMP_FORMAT" variable nil (reparse-symbol indented_block_body) [11478 11512])
                    ("serialize_to_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11543 11547])
                            ("parameters" variable nil (reparse-symbol function_parameters) [11549 11559])
                            ("operation_model" variable nil (reparse-symbol function_parameters) [11561 11576]))                          )
                        (reparse-symbol indented_block_body) [11518 12374])
                    ("_serialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12394 12398])
                            ("serialized" variable nil (reparse-symbol function_parameters) [12400 12410])
                            ("value" variable nil (reparse-symbol function_parameters) [12412 12417])
                            ("shape" variable nil (reparse-symbol function_parameters) [12419 12424])
                            ("key" variable nil (reparse-symbol function_parameters) [12426 12429]))                          )
                        (reparse-symbol indented_block_body) [12379 12604])
                    ("_serialize_type_structure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12639 12643])
                            ("serialized" variable nil (reparse-symbol function_parameters) [12645 12655])
                            ("value" variable nil (reparse-symbol function_parameters) [12657 12662])
                            ("shape" variable nil (reparse-symbol function_parameters) [12664 12669])
                            ("key" variable nil (reparse-symbol function_parameters) [12671 12674]))                          )
                        (reparse-symbol indented_block_body) [12609 13481])
                    ("_serialize_type_map" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13510 13514])
                            ("serialized" variable nil (reparse-symbol function_parameters) [13516 13526])
                            ("value" variable nil (reparse-symbol function_parameters) [13528 13533])
                            ("shape" variable nil (reparse-symbol function_parameters) [13535 13540])
                            ("key" variable nil (reparse-symbol function_parameters) [13542 13545]))                          )
                        (reparse-symbol indented_block_body) [13486 13735])
                    ("_serialize_type_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13765 13769])
                            ("serialized" variable nil (reparse-symbol function_parameters) [13771 13781])
                            ("value" variable nil (reparse-symbol function_parameters) [13783 13788])
                            ("shape" variable nil (reparse-symbol function_parameters) [13790 13795])
                            ("key" variable nil (reparse-symbol function_parameters) [13797 13800]))                          )
                        (reparse-symbol indented_block_body) [13740 14321])
                    ("_default_serialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14349 14353])
                            ("serialized" variable nil (reparse-symbol function_parameters) [14355 14365])
                            ("value" variable nil (reparse-symbol function_parameters) [14367 14372])
                            ("shape" variable nil (reparse-symbol function_parameters) [14374 14379])
                            ("key" variable nil (reparse-symbol function_parameters) [14381 14384]))                          )
                        (reparse-symbol indented_block_body) [14326 14419])
                    ("_serialize_type_timestamp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14454 14458])
                            ("serialized" variable nil (reparse-symbol function_parameters) [14460 14470])
                            ("value" variable nil (reparse-symbol function_parameters) [14472 14477])
                            ("shape" variable nil (reparse-symbol function_parameters) [14479 14484])
                            ("key" variable nil (reparse-symbol function_parameters) [14486 14489]))                          )
                        (reparse-symbol indented_block_body) [14424 14556])
                    ("_serialize_type_blob" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14586 14590])
                            ("serialized" variable nil (reparse-symbol function_parameters) [14592 14602])
                            ("value" variable nil (reparse-symbol function_parameters) [14604 14609])
                            ("shape" variable nil (reparse-symbol function_parameters) [14611 14616])
                            ("key" variable nil (reparse-symbol function_parameters) [14618 14621]))                          )
                        (reparse-symbol indented_block_body) [14561 14674]))                  
                :type "class")
                nil [11440 14674])
            ("BaseRestSerializer" type
               (:documentation "Base class for rest protocols.

    The only variance between the various rest protocols is the
    way that the body is serialized.  All other aspects (headers, uri, etc.)
    are the same and logic for serializing those aspects lives here.

    Subclasses must implement the ``_serialize_body_params`` method.

    "
                :superclasses ("Serializer")
                :members 
                  ( ("KNOWN_LOCATIONS" variable nil (reparse-symbol indented_block_body) [15222 15283])
                    ("serialize_to_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15314 15318])
                            ("parameters" variable nil (reparse-symbol function_parameters) [15320 15330])
                            ("operation_model" variable nil (reparse-symbol function_parameters) [15332 15347]))                          )
                        (reparse-symbol indented_block_body) [15289 17622])
                    ("_render_uri_template" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17652 17656])
                            ("uri_template" variable nil (reparse-symbol function_parameters) [17658 17670])
                            ("params" variable nil (reparse-symbol function_parameters) [17672 17678]))                          )
                        (reparse-symbol indented_block_body) [17627 18313])
                    ("_serialize_payload" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18341 18345])
                            ("partitioned" variable nil (reparse-symbol function_parameters) [18347 18358])
                            ("parameters" variable nil (reparse-symbol function_parameters) [18360 18370])
                            ("serialized" variable nil (reparse-symbol function_parameters) [18399 18409])
                            ("shape" variable nil (reparse-symbol function_parameters) [18411 18416])
                            ("shape_members" variable nil (reparse-symbol function_parameters) [18418 18431]))                          )
                        (reparse-symbol indented_block_body) [18318 19714])
                    ("_encode_payload" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19739 19743])
                            ("body" variable nil (reparse-symbol function_parameters) [19745 19749]))                          )
                        (reparse-symbol indented_block_body) [19719 19870])
                    ("_partition_parameters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19901 19905])
                            ("partitioned" variable nil (reparse-symbol function_parameters) [19907 19918])
                            ("param_name" variable nil (reparse-symbol function_parameters) [19920 19930])
                            ("param_value" variable nil (reparse-symbol function_parameters) [19962 19973])
                            ("shape_members" variable nil (reparse-symbol function_parameters) [19975 19988]))                          )
                        (reparse-symbol indented_block_body) [19875 21845])
                    ("_do_serialize_header_map" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21879 21883])
                            ("header_prefix" variable nil (reparse-symbol function_parameters) [21885 21898])
                            ("headers" variable nil (reparse-symbol function_parameters) [21900 21907])
                            ("user_input" variable nil (reparse-symbol function_parameters) [21909 21919]))                          )
                        (reparse-symbol indented_block_body) [21850 22045])
                    ("_serialize_body_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22077 22081])
                            ("params" variable nil (reparse-symbol function_parameters) [22083 22089])
                            ("shape" variable nil (reparse-symbol function_parameters) [22091 22096]))                          )
                        (reparse-symbol indented_block_body) [22050 22159])
                    ("_convert_header_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22190 22194])
                            ("shape" variable nil (reparse-symbol function_parameters) [22196 22201])
                            ("value" variable nil (reparse-symbol function_parameters) [22203 22208]))                          )
                        (reparse-symbol indented_block_body) [22164 22692]))                  
                :type "class")
                nil [14676 22692])
            ("RestJSONSerializer" type
               (:superclasses ("BaseRestSerializer" "JSONSerializer")
                :members 
                  ( ("_serialize_body_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22788 22792])
                            ("params" variable nil (reparse-symbol function_parameters) [22794 22800])
                            ("shape" variable nil (reparse-symbol function_parameters) [22802 22807]))                          )
                        (reparse-symbol indented_block_body) [22761 22981]))                  
                :type "class")
                nil [22694 22981])
            ("RestXMLSerializer" type
               (:superclasses ("BaseRestSerializer")
                :members 
                  ( ("TIMESTAMP_FORMAT" variable nil (reparse-symbol indented_block_body) [23032 23060])
                    ("_serialize_body_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23093 23097])
                            ("params" variable nil (reparse-symbol function_parameters) [23099 23105])
                            ("shape" variable nil (reparse-symbol function_parameters) [23107 23112]))                          )
                        (reparse-symbol indented_block_body) [23066 23392])
                    ("_serialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23412 23416])
                            ("shape" variable nil (reparse-symbol function_parameters) [23418 23423])
                            ("params" variable nil (reparse-symbol function_parameters) [23425 23431])
                            ("xmlnode" variable nil (reparse-symbol function_parameters) [23433 23440])
                            ("name" variable nil (reparse-symbol function_parameters) [23442 23446]))                          )
                        (reparse-symbol indented_block_body) [23397 23615])
                    ("_serialize_type_structure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23650 23654])
                            ("xmlnode" variable nil (reparse-symbol function_parameters) [23656 23663])
                            ("params" variable nil (reparse-symbol function_parameters) [23665 23671])
                            ("shape" variable nil (reparse-symbol function_parameters) [23673 23678])
                            ("name" variable nil (reparse-symbol function_parameters) [23680 23684]))                          )
                        (reparse-symbol indented_block_body) [23620 25002])
                    ("_serialize_type_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25032 25036])
                            ("xmlnode" variable nil (reparse-symbol function_parameters) [25038 25045])
                            ("params" variable nil (reparse-symbol function_parameters) [25047 25053])
                            ("shape" variable nil (reparse-symbol function_parameters) [25055 25060])
                            ("name" variable nil (reparse-symbol function_parameters) [25062 25066]))                          )
                        (reparse-symbol indented_block_body) [25007 25471])
                    ("_serialize_type_map" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25500 25504])
                            ("xmlnode" variable nil (reparse-symbol function_parameters) [25506 25513])
                            ("params" variable nil (reparse-symbol function_parameters) [25515 25521])
                            ("shape" variable nil (reparse-symbol function_parameters) [25523 25528])
                            ("name" variable nil (reparse-symbol function_parameters) [25530 25534]))                          )
                        (reparse-symbol indented_block_body) [25476 26337])
                    ("_serialize_type_boolean" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26370 26374])
                            ("xmlnode" variable nil (reparse-symbol function_parameters) [26376 26383])
                            ("params" variable nil (reparse-symbol function_parameters) [26385 26391])
                            ("shape" variable nil (reparse-symbol function_parameters) [26393 26398])
                            ("name" variable nil (reparse-symbol function_parameters) [26400 26404]))                          )
                        (reparse-symbol indented_block_body) [26342 26777])
                    ("_serialize_type_blob" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26807 26811])
                            ("xmlnode" variable nil (reparse-symbol function_parameters) [26813 26820])
                            ("params" variable nil (reparse-symbol function_parameters) [26822 26828])
                            ("shape" variable nil (reparse-symbol function_parameters) [26830 26835])
                            ("name" variable nil (reparse-symbol function_parameters) [26837 26841]))                          )
                        (reparse-symbol indented_block_body) [26782 26942])
                    ("_serialize_type_timestamp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26977 26981])
                            ("xmlnode" variable nil (reparse-symbol function_parameters) [26983 26990])
                            ("params" variable nil (reparse-symbol function_parameters) [26992 26998])
                            ("shape" variable nil (reparse-symbol function_parameters) [27000 27005])
                            ("name" variable nil (reparse-symbol function_parameters) [27007 27011]))                          )
                        (reparse-symbol indented_block_body) [26947 27126])
                    ("_default_serialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27154 27158])
                            ("xmlnode" variable nil (reparse-symbol function_parameters) [27160 27167])
                            ("params" variable nil (reparse-symbol function_parameters) [27169 27175])
                            ("shape" variable nil (reparse-symbol function_parameters) [27177 27182])
                            ("name" variable nil (reparse-symbol function_parameters) [27184 27188]))                          )
                        (reparse-symbol indented_block_body) [27131 27286]))                  
                :type "class")
                nil [22983 27286])
            ("SERIALIZERS" variable nil nil [27288 27461]))          
      :file "serialize.py"
      :pointmax 27462
      :fsize 27461
      :lastmodtime '(22858 51697 174173 355000)
      :unmatched-syntax nil)
    (semanticdb-table "model.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Abstractions to interact with service models.\"\"\"" code nil nil [562 613])
            ("collections" include nil nil [614 649])
            ("botocore.utils" include nil nil [651 708])
            ("botocore.compat" include nil nil [709 748])
            ("NOT_SET" variable nil nil [751 769])
            ("NoShapeFoundError" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [812 816]))                  
                :type "class")
                nil [772 817])
            ("InvalidShapeError" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [859 863]))                  
                :type "class")
                nil [819 864])
            ("OperationNotFoundError" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [911 915]))                  
                :type "class")
                nil [866 916])
            ("InvalidShapeReferenceError" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [967 971]))                  
                :type "class")
                nil [918 972])
            ("UndefinedModelAttributeError" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [1025 1029]))                  
                :type "class")
                nil [974 1030])
            ("Shape" type
               (:documentation "Object representing a shape from the service model."
                :superclasses ("object")
                :members 
                  ( ("SERIALIZED_ATTRS" variable nil (reparse-symbol indented_block_body) [1370 1620])
                    ("METADATA_ATTRS" variable nil (reparse-symbol indented_block_body) [1625 1753])
                    ("MAP_TYPE" variable nil (reparse-symbol indented_block_body) [1758 1780])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"

        :type shape_name: string
        :param shape_name: The name of the shape.

        :type shape_model: dict
        :param shape_model: The shape model.  This would be the value
            associated with the key in the \"shapes\" dict of the
            service model (i.e ``model['shapes'][shape_name]``)

        :type shape_resolver: botocore.model.ShapeResolver
        :param shape_resolver: A shape resolver object.  This is used to
            resolve references to other shapes.  For scalar shape types
            (string, integer, boolean, etc.), this argument is not
            required.  If a shape_resolver is not provided for a complex
            type, then a ``ValueError`` will be raised when an attempt
            to resolve a shape is made.

        \"\"\"" code nil (reparse-symbol indented_block_body) [1860 2647])
                            ("self" variable nil (reparse-symbol indented_block_body) [2656 2678])
                            ("self" variable nil (reparse-symbol indented_block_body) [2687 2723])
                            ("self" variable nil (reparse-symbol indented_block_body) [2732 2789])
                            ("self" variable nil (reparse-symbol indented_block_body) [2798 2829])
                            ("if" code nil (reparse-symbol indented_block_body) [2838 3246])
                            ("self" variable nil (reparse-symbol indented_block_body) [3254 3291])
                            ("self" variable nil (reparse-symbol indented_block_body) [3300 3316]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1799 1803])
                            ("shape_name" variable nil (reparse-symbol function_parameters) [1805 1815])
                            ("shape_model" variable nil (reparse-symbol function_parameters) [1817 1828])
                            ("shape_resolver" variable nil (reparse-symbol function_parameters) [1830 1844]))                          
                        :documentation "

        :type shape_name: string
        :param shape_name: The name of the shape.

        :type shape_model: dict
        :param shape_model: The shape model.  This would be the value
            associated with the key in the \"shapes\" dict of the
            service model (i.e ``model['shapes'][shape_name]``)

        :type shape_resolver: botocore.model.ShapeResolver
        :param shape_resolver: A shape resolver object.  This is used to
            resolve references to other shapes.  For scalar shape types
            (string, integer, boolean, etc.), this argument is not
            required.  If a shape_resolver is not provided for a complex
            type, then a ``ValueError`` will be raised when an attempt
            to resolve a shape is made.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1786 3317])
                    ("serialization" function
                       (:parent "dummy"
                        :decorators 
                          ( ("CachedProperty" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3360 3364]))                          
                        :documentation "Serialization information about the shape.

        This contains information that may be needed for input serialization
        or response parsing.  This can include:

            * name
            * queryName
            * flattened
            * location
            * payload
            * streaming
            * xmlNamespace
            * resultWrapper
            * xmlAttribute
            * jsonvalue

        :rtype: dict
        :return: Serialization information about the shape.

        ")
                        (reparse-symbol indented_block_body) [3322 4291])
                    ("metadata" function
                       (:parent "dummy"
                        :decorators 
                          ( ("CachedProperty" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4329 4333]))                          
                        :documentation "Metadata about the shape.

        This requires optional information about the shape, including:

            * min
            * max
            * enum
            * sensitive
            * required
            * idempotencyToken

        :rtype: dict
        :return: Metadata about the shape.

        ")
                        (reparse-symbol indented_block_body) [4296 4865])
                    ("required_members" function
                       (:parent "dummy"
                        :decorators 
                          ( ("CachedProperty" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4911 4915]))                          
                        :documentation "A list of members that are required.

        A structure shape can define members that are required.
        This value will return a list of required members.  If there
        are no required members an empty list is returned.

        ")
                        (reparse-symbol indented_block_body) [4870 5221])
                    ("_resolve_shape_ref" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5249 5253])
                            ("shape_ref" variable nil (reparse-symbol function_parameters) [5255 5264]))                          )
                        (reparse-symbol indented_block_body) [5226 5332])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5350 5354]))                          )
                        (reparse-symbol indented_block_body) [5337 5451]))                  
                :type "class")
                nil [1032 5451])
            ("StructureShape" type
               (:superclasses ("Shape")
                :members 
                  ( ("members" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5518 5522]))                          
                        :decorators 
                          ( ("CachedProperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [5486 6008]))                  
                :type "class")
                nil [5453 6008])
            ("ListShape" type
               (:superclasses ("Shape")
                :members 
                  ( ("member" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6069 6073]))                          
                        :decorators 
                          ( ("CachedProperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6038 6144]))                  
                :type "class")
                nil [6010 6144])
            ("MapShape" type
               (:superclasses ("Shape")
                :members 
                  ( ("key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6201 6205]))                          
                        :decorators 
                          ( ("CachedProperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6173 6273])
                    ("value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6308 6312]))                          
                        :decorators 
                          ( ("CachedProperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6278 6382]))                  
                :type "class")
                nil [6146 6382])
            ("StringShape" type
               (:superclasses ("Shape")
                :members 
                  ( ("enum" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6443 6447]))                          
                        :decorators 
                          ( ("CachedProperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6414 6495]))                  
                :type "class")
                nil [6384 6495])
            ("ServiceModel" type
               (:documentation "

    :ivar service_description: The parsed service description dictionary.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"

        :type service_description: dict
        :param service_description: The service description model.  This value
            is obtained from a botocore.loader.Loader, or from directly loading
            the file yourself::

                service_description = json.load(
                    open('/path/to/service-description-model.json'))
                model = ServiceModel(service_description)

        :type service_name: str
        :param service_name: The name of the service.  Normally this is
            the endpoint prefix defined in the service_description.  However,
            you can override this value to provide a more convenient name.
            This is done in a few places in botocore (ses instead of email,
            emr instead of elasticmapreduce).  If this value is not provided,
            it will default to the endpointPrefix defined in the model.

        \"\"\"" code nil (reparse-symbol indented_block_body) [6690 7599])
                            ("self" variable nil (reparse-symbol indented_block_body) [7608 7655])
                            ("self" variable nil (reparse-symbol indented_block_body) [7730 7785])
                            ("self" variable nil (reparse-symbol indented_block_body) [7794 7882])
                            ("self" variable nil (reparse-symbol indented_block_body) [7891 7924])
                            ("self" variable nil (reparse-symbol indented_block_body) [7933 7966])
                            ("self" variable nil (reparse-symbol indented_block_body) [7975 8000]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6635 6639])
                            ("service_description" variable nil (reparse-symbol function_parameters) [6641 6660])
                            ("service_name" variable nil (reparse-symbol function_parameters) [6662 6674]))                          
                        :documentation "

        :type service_description: dict
        :param service_description: The service description model.  This value
            is obtained from a botocore.loader.Loader, or from directly loading
            the file yourself::

                service_description = json.load(
                    open('/path/to/service-description-model.json'))
                model = ServiceModel(service_description)

        :type service_name: str
        :param service_name: The name of the service.  Normally this is
            the endpoint prefix defined in the service_description.  However,
            you can override this value to provide a more convenient name.
            This is done in a few places in botocore (ses instead of email,
            emr instead of elasticmapreduce).  If this value is not provided,
            it will default to the endpointPrefix defined in the model.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6622 8001])
                    ("shape_for" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8020 8024])
                            ("shape_name" variable nil (reparse-symbol function_parameters) [8026 8036])
                            ("member_traits" variable nil (reparse-symbol function_parameters) [8038 8051]))                          )
                        (reparse-symbol indented_block_body) [8006 8153])
                    ("resolve_shape_ref" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8180 8184])
                            ("shape_ref" variable nil (reparse-symbol function_parameters) [8186 8195]))                          )
                        (reparse-symbol indented_block_body) [8158 8263])
                    ("shape_names" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8304 8308]))                          
                        :decorators 
                          ( ("CachedProperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8268 8376])
                    ("operation_model" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8421 8425])
                            ("operation_name" variable nil (reparse-symbol function_parameters) [8427 8441]))                          
                        :decorators 
                          ( ("instance_cache" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8381 8674])
                    ("documentation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8717 8721]))                          
                        :decorators 
                          ( ("CachedProperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8679 8790])
                    ("operation_names" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8835 8839]))                          
                        :decorators 
                          ( ("CachedProperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8795 8911])
                    ("service_name" function
                       (:parent "dummy"
                        :decorators 
                          ( ("CachedProperty" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8953 8957]))                          
                        :documentation "The name of the service.

        This defaults to the endpointPrefix defined in the service model.
        However, this value can be overriden when a ``ServiceModel`` is
        created.  If a service_name was not provided when the ``ServiceModel``
        was created and if there is no endpointPrefix defined in the
        service model, then an ``UndefinedModelAttributeError`` exception
        will be raised.

        ")
                        (reparse-symbol indented_block_body) [8916 9537])
                    ("signing_name" function
                       (:parent "dummy"
                        :decorators 
                          ( ("CachedProperty" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9579 9583]))                          
                        :documentation "The name to use when computing signatures.

        If the model does not define a signing name, this
        value will be the endpoint prefix defined in the model.
        ")
                        (reparse-symbol indented_block_body) [9542 9940])
                    ("api_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9981 9985]))                          
                        :decorators 
                          ( ("CachedProperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9945 10045])
                    ("protocol" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10083 10087]))                          
                        :decorators 
                          ( ("CachedProperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10050 10145])
                    ("endpoint_prefix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10190 10194]))                          
                        :decorators 
                          ( ("CachedProperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10150 10258])
                    ("_get_metadata_property" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10290 10294])
                            ("name" variable nil (reparse-symbol function_parameters) [10296 10300]))                          )
                        (reparse-symbol indented_block_body) [10263 10532])
                    ("signature_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10693 10697]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10657 10912])
                    ("signature_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10969 10973])
                            ("value" variable nil (reparse-symbol function_parameters) [10975 10980]))                          
                        :decorators 
                          ( ("signature_version.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10917 11023]))                  
                :type "class")
                nil [6497 11023])
            ("OperationModel" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"

        :type operation_model: dict
        :param operation_model: The operation model.  This comes from the
            service model, and is the value associated with the operation
            name in the service model (i.e ``model['operations'][op_name]``).

        :type service_model: botocore.model.ServiceModel
        :param service_model: The service model associated with the operation.

        :type name: string
        :param name: The operation name.  This is the operation name exposed to
            the users of this model.  This can potentially be different from
            the \"wire_name\", which is the operation name that *must* by
            provided over the wire.  For example, given::

               \"CreateCloudFrontOriginAccessIdentity\":{
                 \"name\":\"CreateCloudFrontOriginAccessIdentity2014_11_06\",
                  ...
              }

           The ``name`` would be ``CreateCloudFrontOriginAccessIdentity``,
           but the ``self.wire_name`` would be
           ``CreateCloudFrontOriginAccessIdentity2014_11_06``, which is the
           value we must send in the corresponding HTTP request.

        \"\"\"" code nil (reparse-symbol indented_block_body) [11130 12294])
                            ("self" variable nil (reparse-symbol indented_block_body) [12303 12342])
                            ("self" variable nil (reparse-symbol indented_block_body) [12351 12386])
                            ("self" variable nil (reparse-symbol indented_block_body) [12395 12416])
                            ("self" variable nil (reparse-symbol indented_block_body) [12559 12604])
                            ("self" variable nil (reparse-symbol indented_block_body) [12613 12651])
                            ("self" variable nil (reparse-symbol indented_block_body) [12660 12703]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11072 11076])
                            ("operation_model" variable nil (reparse-symbol function_parameters) [11078 11093])
                            ("service_model" variable nil (reparse-symbol function_parameters) [11095 11108])
                            ("name" variable nil (reparse-symbol function_parameters) [11110 11114]))                          
                        :documentation "

        :type operation_model: dict
        :param operation_model: The operation model.  This comes from the
            service model, and is the value associated with the operation
            name in the service model (i.e ``model['operations'][op_name]``).

        :type service_model: botocore.model.ServiceModel
        :param service_model: The service model associated with the operation.

        :type name: string
        :param name: The operation name.  This is the operation name exposed to
            the users of this model.  This can potentially be different from
            the \"wire_name\", which is the operation name that *must* by
            provided over the wire.  For example, given::

               \"CreateCloudFrontOriginAccessIdentity\":{
                 \"name\":\"CreateCloudFrontOriginAccessIdentity2014_11_06\",
                  ...
              }

           The ``name`` would be ``CreateCloudFrontOriginAccessIdentity``,
           but the ``self.wire_name`` would be
           ``CreateCloudFrontOriginAccessIdentity2014_11_06``, which is the
           value we must send in the corresponding HTTP request.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11059 12704])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12738 12742]))                          
                        :decorators 
                          ( ("CachedProperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12709 12866])
                    ("wire_name" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12899 12903]))                          
                        :documentation "The wire name of the operation.

        In many situations this is the same value as the
        ``name``, value, but in some services, the operation name
        exposed to the user is different from the operaiton name
        we send across the wire (e.g cloudfront).

        Any serialization code should use ``wire_name``.

        ")
                        (reparse-symbol indented_block_body) [12871 13308])
                    ("service_model" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13345 13349]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13313 13387])
                    ("documentation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13430 13434]))                          
                        :decorators 
                          ( ("CachedProperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13392 13499])
                    ("input_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13540 13544]))                          
                        :decorators 
                          ( ("CachedProperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13504 13820])
                    ("output_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13862 13866]))                          
                        :decorators 
                          ( ("CachedProperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13825 14210])
                    ("idempotent_members" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14258 14262]))                          
                        :decorators 
                          ( ("CachedProperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [14215 14537])
                    ("auth_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14576 14580]))                          
                        :decorators 
                          ( ("CachedProperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [14542 14636])
                    ("error_shapes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14678 14682]))                          
                        :decorators 
                          ( ("CachedProperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [14641 14820])
                    ("has_streaming_input" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14869 14873]))                          
                        :decorators 
                          ( ("CachedProperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [14825 14930])
                    ("has_streaming_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14980 14984]))                          
                        :decorators 
                          ( ("CachedProperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [14935 15042])
                    ("get_streaming_input" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15071 15075]))                          )
                        (reparse-symbol indented_block_body) [15047 15136])
                    ("get_streaming_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15166 15170]))                          )
                        (reparse-symbol indented_block_body) [15141 15232])
                    ("_get_streaming_body" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15261 15265])
                            ("shape" variable nil (reparse-symbol function_parameters) [15267 15272]))                          
                        :documentation "Returns the streaming member's shape if any; or None otherwise.")
                        (reparse-symbol indented_block_body) [15237 15646])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15664 15668]))                          )
                        (reparse-symbol indented_block_body) [15651 15739]))                  
                :type "class")
                nil [11025 15739])
            ("ShapeResolver" type
               (:documentation "Resolves shape references."
                :superclasses ("object")
                :members 
                  ( ("SHAPE_CLASSES" variable nil (reparse-symbol indented_block_body) [15880 16022])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [16067 16094])
                            ("self" variable nil (reparse-symbol indented_block_body) [16103 16125]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16041 16045])
                            ("shape_map" variable nil (reparse-symbol function_parameters) [16047 16056]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16028 16126])
                    ("get_shape_by_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16153 16157])
                            ("shape_name" variable nil (reparse-symbol function_parameters) [16159 16169])
                            ("member_traits" variable nil (reparse-symbol function_parameters) [16171 16184]))                          )
                        (reparse-symbol indented_block_body) [16131 16772])
                    ("resolve_shape_ref" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16799 16803])
                            ("shape_ref" variable nil (reparse-symbol function_parameters) [16805 16814]))                          )
                        (reparse-symbol indented_block_body) [16777 17743]))                  
                :type "class")
                nil [15741 17743])
            ("UnresolvableShapeMap" type
               (:documentation "A ShapeResolver that will throw ValueErrors when shapes are resolved.
    "
                :superclasses ("object")
                :members 
                  ( ("get_shape_by_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17892 17896])
                            ("shape_name" variable nil (reparse-symbol function_parameters) [17898 17908])
                            ("member_traits" variable nil (reparse-symbol function_parameters) [17910 17923]))                          )
                        (reparse-symbol indented_block_body) [17870 18050])
                    ("resolve_shape_ref" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18077 18081])
                            ("shape_ref" variable nil (reparse-symbol function_parameters) [18083 18092]))                          )
                        (reparse-symbol indented_block_body) [18055 18215]))                  
                :type "class")
                nil [17745 18215])
            ("DenormalizedStructureBuilder" type
               (:documentation "Build a StructureShape from a denormalized model.

    This is a convenience builder class that makes it easy to construct
    ``StructureShape``s based on a denormalized model.

    It will handle the details of creating unique shape names and creating
    the appropriate shape map needed by the ``StructureShape`` class.

    Example usage::

        builder = DenormalizedStructureBuilder()
        shape = builder.with_members({
            'A': {
                'type': 'structure',
                'members': {
                    'B': {
                        'type': 'structure',
                        'members': {
                            'C': {
                                'type': 'string',
                            }
                        }
                    }
                }
            }
        }).build_model()
        # ``shape`` is now an instance of botocore.model.StructureShape

    :type dict_type: class
    :param dict_type: The dictionary type to use, allowing you to opt-in
                      to using OrderedDict or another dict type. This can
                      be particularly useful for testing when order
                      matters, such as for documentation.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [19541 19569])
                            ("self" variable nil (reparse-symbol indented_block_body) [19578 19621])
                            ("if" code nil (reparse-symbol indented_block_body) [19630 19720]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19515 19519])
                            ("name" variable nil (reparse-symbol function_parameters) [19521 19525]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [19502 19720])
                    ("with_members" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19742 19746])
                            ("members" variable nil (reparse-symbol function_parameters) [19748 19755]))                          
                        :documentation "

        :type members: dict
        :param members: The denormalized members.

        :return: self

        ")
                        (reparse-symbol indented_block_body) [19725 19937])
                    ("build_model" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19958 19962]))                          
                        :documentation "Build the model based on the provided members.

        :rtype: botocore.model.StructureShape
        :return: The built StructureShape object.

        ")
                        (reparse-symbol indented_block_body) [19942 20548])
                    ("_build_model" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20570 20574])
                            ("model" variable nil (reparse-symbol function_parameters) [20576 20581])
                            ("shapes" variable nil (reparse-symbol function_parameters) [20583 20589])
                            ("shape_name" variable nil (reparse-symbol function_parameters) [20591 20601]))                          )
                        (reparse-symbol indented_block_body) [20553 21221])
                    ("_build_structure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21247 21251])
                            ("model" variable nil (reparse-symbol function_parameters) [21253 21258])
                            ("shapes" variable nil (reparse-symbol function_parameters) [21260 21266]))                          )
                        (reparse-symbol indented_block_body) [21226 21662])
                    ("_build_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21683 21687])
                            ("model" variable nil (reparse-symbol function_parameters) [21689 21694])
                            ("shapes" variable nil (reparse-symbol function_parameters) [21696 21702]))                          )
                        (reparse-symbol indented_block_body) [21667 21956])
                    ("_build_map" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21976 21980])
                            ("model" variable nil (reparse-symbol function_parameters) [21982 21987])
                            ("shapes" variable nil (reparse-symbol function_parameters) [21989 21995]))                          )
                        (reparse-symbol indented_block_body) [21961 22426])
                    ("_build_initial_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22456 22460])
                            ("model" variable nil (reparse-symbol function_parameters) [22462 22467]))                          )
                        (reparse-symbol indented_block_body) [22431 22721])
                    ("_build_scalar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22744 22748])
                            ("model" variable nil (reparse-symbol function_parameters) [22750 22755]))                          )
                        (reparse-symbol indented_block_body) [22726 22806])
                    ("_get_shape_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22831 22835])
                            ("model" variable nil (reparse-symbol function_parameters) [22837 22842]))                          )
                        (reparse-symbol indented_block_body) [22811 23002]))                  
                :type "class")
                nil [18217 23002])
            ("ShapeNameGenerator" type
               (:documentation "Generate unique shape names for a type.

    This class can be used in conjunction with the DenormalizedStructureBuilder
    to generate unique shape names for a given type.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [23260 23295]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23245 23249]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23232 23296])
                    ("new_shape_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23320 23324])
                            ("type_name" variable nil (reparse-symbol function_parameters) [23326 23335]))                          
                        :documentation "Generate a unique shape name.

        This method will guarantee a unique shape name each time it is
        called with the same type.

        ::

            >>> s = ShapeNameGenerator()
            >>> s.new_shape_name('structure')
            'StructureType1'
            >>> s.new_shape_name('structure')
            'StructureType2'
            >>> s.new_shape_name('list')
            'ListType1'
            >>> s.new_shape_name('list')
            'ListType2'


        :type type_name: string
        :param type_name: The type name (structure, list, map, string, etc.)

        :rtype: string
        :return: A unique shape name for the given type

        ")
                        (reparse-symbol indented_block_body) [23301 24214]))                  
                :type "class")
                nil [23004 24214]))          
      :file "model.py"
      :pointmax 24214
      :fsize 24213
      :lastmodtime '(22858 51697 174173 355000)
      :unmatched-syntax '((INDENT_BLOCK 14657 . 15739)))
    (semanticdb-table "client.py"
      :major-mode 'python-mode
      :tags 
        '( ("logging" include nil nil [562 576])
            ("functools" include nil nil [577 593])
            ("botocore" include nil nil [595 634])
            ("botocore.auth" include nil nil [635 675])
            ("botocore.awsrequest" include nil nil [676 728])
            ("botocore.docs.docstring" include nil nil [729 786])
            ("botocore.docs.docstring" include nil nil [787 841])
            ("botocore.exceptions" include nil nil [842 904])
            ("botocore.exceptions" include nil nil [905 962])
            ("botocore.exceptions" include nil nil [963 1023])
            ("botocore.hooks" include nil nil [1024 1074])
            ("botocore.model" include nil nil [1075 1114])
            ("botocore.paginate" include nil nil [1115 1154])
            ("botocore.utils" include nil nil [1155 1196])
            ("botocore.utils" include nil nil [1197 1247])
            ("botocore.utils" include nil nil [1248 1300])
            ("botocore.utils" include nil nil [1301 1346])
            ("botocore.utils" include nil nil [1347 1385])
            ("botocore.utils" include nil nil [1386 1441])
            ("botocore.utils" include nil nil [1442 1492])
            ("botocore.args" include nil nil [1493 1536])
            ("botocore.compat" include nil nil [1537 1573])
            ("botocore" include nil nil [1574 1603])
            ("botocore.config" include nil nil [1703 1737])
            ("logger" variable nil nil [1740 1776])
            ("ClientCreator" type
               (:documentation "Creates client objects for a service."
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2079 2100])
                            ("self" variable nil (reparse-symbol indented_block_body) [2109 2152])
                            ("self" variable nil (reparse-symbol indented_block_body) [2161 2190])
                            ("self" variable nil (reparse-symbol indented_block_body) [2199 2234])
                            ("self" variable nil (reparse-symbol indented_block_body) [2243 2294])
                            ("self" variable nil (reparse-symbol indented_block_body) [2303 2358])
                            ("self" variable nil (reparse-symbol indented_block_body) [2367 2422])
                            ("self" variable nil (reparse-symbol indented_block_body) [2431 2476]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1873 1877])
                            ("loader" variable nil (reparse-symbol function_parameters) [1879 1885])
                            ("endpoint_resolver" variable nil (reparse-symbol function_parameters) [1887 1904])
                            ("user_agent" variable nil (reparse-symbol function_parameters) [1906 1916])
                            ("event_emitter" variable nil (reparse-symbol function_parameters) [1918 1931])
                            ("retry_handler_factory" variable nil (reparse-symbol function_parameters) [1950 1971])
                            ("retry_config_translator" variable nil (reparse-symbol function_parameters) [1973 1996])
                            ("response_parser_factory" variable nil (reparse-symbol function_parameters) [2015 2038])
                            ("exceptions_factory" variable nil (reparse-symbol function_parameters) [2045 2063]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1860 2477])
                    ("create_client" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2500 2504])
                            ("service_name" variable nil (reparse-symbol function_parameters) [2506 2518])
                            ("region_name" variable nil (reparse-symbol function_parameters) [2520 2531])
                            ("is_secure" variable nil (reparse-symbol function_parameters) [2533 2542])
                            ("endpoint_url" variable nil (reparse-symbol function_parameters) [2571 2583])
                            ("verify" variable nil (reparse-symbol function_parameters) [2590 2596])
                            ("credentials" variable nil (reparse-symbol function_parameters) [2625 2636])
                            ("scoped_config" variable nil (reparse-symbol function_parameters) [2643 2656])
                            ("api_version" variable nil (reparse-symbol function_parameters) [2685 2696])
                            ("client_config" variable nil (reparse-symbol function_parameters) [2725 2738]))                          )
                        (reparse-symbol indented_block_body) [2482 3481])
                    ("create_client_class" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3510 3514])
                            ("service_name" variable nil (reparse-symbol function_parameters) [3516 3528])
                            ("api_version" variable nil (reparse-symbol function_parameters) [3530 3541]))                          )
                        (reparse-symbol indented_block_body) [3486 3695])
                    ("_create_client_class" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3725 3729])
                            ("service_name" variable nil (reparse-symbol function_parameters) [3731 3743])
                            ("service_model" variable nil (reparse-symbol function_parameters) [3745 3758]))                          )
                        (reparse-symbol indented_block_body) [3700 4345])
                    ("_load_service_model" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4374 4378])
                            ("service_name" variable nil (reparse-symbol function_parameters) [4380 4392])
                            ("api_version" variable nil (reparse-symbol function_parameters) [4394 4405]))                          )
                        (reparse-symbol indented_block_body) [4350 4722])
                    ("_register_retries" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4749 4753])
                            ("service_model" variable nil (reparse-symbol function_parameters) [4755 4768]))                          )
                        (reparse-symbol indented_block_body) [4727 5672])
                    ("_register_s3_events" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5701 5705])
                            ("client" variable nil (reparse-symbol function_parameters) [5707 5713])
                            ("endpoint_bridge" variable nil (reparse-symbol function_parameters) [5715 5730])
                            ("endpoint_url" variable nil (reparse-symbol function_parameters) [5732 5744])
                            ("client_config" variable nil (reparse-symbol function_parameters) [5774 5787])
                            ("scoped_config" variable nil (reparse-symbol function_parameters) [5789 5802]))                          )
                        (reparse-symbol indented_block_body) [5677 6593])
                    ("_set_s3_addressing_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6627 6631])
                            ("endpoint_url" variable nil (reparse-symbol function_parameters) [6633 6645])
                            ("s3_config" variable nil (reparse-symbol function_parameters) [6647 6656])
                            ("event_emitter" variable nil (reparse-symbol function_parameters) [6658 6671]))                          )
                        (reparse-symbol indented_block_body) [6598 7027])
                    ("_get_s3_addressing_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7061 7065])
                            ("endpoint_url" variable nil (reparse-symbol function_parameters) [7067 7079])
                            ("s3_config" variable nil (reparse-symbol function_parameters) [7081 7090]))                          )
                        (reparse-symbol indented_block_body) [7032 7626])
                    ("_get_s3_addressing_handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7662 7666])
                            ("endpoint_url" variable nil (reparse-symbol function_parameters) [7668 7680])
                            ("s3_config" variable nil (reparse-symbol function_parameters) [7682 7691])
                            ("addressing_style" variable nil (reparse-symbol function_parameters) [7728 7744]))                          )
                        (reparse-symbol indented_block_body) [7631 8980])
                    ("_is_s3_accelerate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9007 9011])
                            ("endpoint_url" variable nil (reparse-symbol function_parameters) [9013 9025])
                            ("s3_config" variable nil (reparse-symbol function_parameters) [9027 9036]))                          )
                        (reparse-symbol indented_block_body) [8985 10145])
                    ("_set_s3_presign_signature_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10188 10192])
                            ("client_meta" variable nil (reparse-symbol function_parameters) [10194 10205])
                            ("client_config" variable nil (reparse-symbol function_parameters) [10249 10262])
                            ("scoped_config" variable nil (reparse-symbol function_parameters) [10264 10277]))                          )
                        (reparse-symbol indented_block_body) [10150 11734])
                    ("_default_s3_presign_to_sigv2" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11772 11776])
                            ("signature_version" variable nil (reparse-symbol function_parameters) [11778 11795])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [11797 11805]))                          
                        :documentation "
        Returns the 's3' (sigv2) signer if presigning an s3 request. This is
        intended to be used to set the default signature version for the signer
        to sigv2.

        :type signature_version: str
        :param signature_version: The current client signature version.

        :type signing_name: str
        :param signing_name: The signing name of the service.

        :return: 's3' if the request is an s3 presign request, None otherwise
        ")
                        (reparse-symbol indented_block_body) [11739 12430])
                    ("_get_client_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12456 12460])
                            ("service_model" variable nil (reparse-symbol function_parameters) [12462 12475])
                            ("region_name" variable nil (reparse-symbol function_parameters) [12477 12488])
                            ("is_secure" variable nil (reparse-symbol function_parameters) [12490 12499])
                            ("endpoint_url" variable nil (reparse-symbol function_parameters) [12526 12538])
                            ("verify" variable nil (reparse-symbol function_parameters) [12540 12546])
                            ("credentials" variable nil (reparse-symbol function_parameters) [12548 12559])
                            ("scoped_config" variable nil (reparse-symbol function_parameters) [12586 12599])
                            ("client_config" variable nil (reparse-symbol function_parameters) [12601 12614])
                            ("endpoint_bridge" variable nil (reparse-symbol function_parameters) [12616 12631]))                          )
                        (reparse-symbol indented_block_body) [12435 13012])
                    ("_create_methods" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13037 13041])
                            ("service_model" variable nil (reparse-symbol function_parameters) [13043 13056]))                          )
                        (reparse-symbol indented_block_body) [13017 13355])
                    ("_create_name_mapping" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13385 13389])
                            ("service_model" variable nil (reparse-symbol function_parameters) [13391 13404]))                          )
                        (reparse-symbol indented_block_body) [13360 13718])
                    ("_create_api_method" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13746 13750])
                            ("py_operation_name" variable nil (reparse-symbol function_parameters) [13752 13769])
                            ("operation_name" variable nil (reparse-symbol function_parameters) [13771 13785])
                            ("service_model" variable nil (reparse-symbol function_parameters) [13814 13827]))                          )
                        (reparse-symbol indented_block_body) [13723 14901]))                  
                :type "class")
                nil [1779 14901])
            ("ClientEndpointBridge" type
               (:documentation "Bridges endpoint data and client creation

    This class handles taking out the relevant arguments from the endpoint
    resolver and determining which values to use, taking into account any
    client configuration options and scope configuration options.

    This class also handles determining what, if any, region to use if no
    explicit region setting is provided. For example, Amazon S3 client will
    utilize \"us-east-1\" by default if no region can be resolved."
                :superclasses ("object")
                :members 
                  ( ("DEFAULT_ENDPOINT" variable nil (reparse-symbol indented_block_body) [15428 15481])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [15658 15706])
                            ("self" variable nil (reparse-symbol indented_block_body) [15715 15757])
                            ("self" variable nil (reparse-symbol indented_block_body) [15766 15800])
                            ("self" variable nil (reparse-symbol indented_block_body) [15809 15843])
                            ("self" code nil (reparse-symbol indented_block_body) [15852 15917]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15500 15504])
                            ("endpoint_resolver" variable nil (reparse-symbol function_parameters) [15506 15523])
                            ("scoped_config" variable nil (reparse-symbol function_parameters) [15525 15538])
                            ("client_config" variable nil (reparse-symbol function_parameters) [15562 15575])
                            ("default_endpoint" variable nil (reparse-symbol function_parameters) [15582 15598])
                            ("service_signing_name" variable nil (reparse-symbol function_parameters) [15622 15642]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15487 15918])
                    ("resolve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15935 15939])
                            ("service_name" variable nil (reparse-symbol function_parameters) [15941 15953])
                            ("region_name" variable nil (reparse-symbol function_parameters) [15955 15966])
                            ("endpoint_url" variable nil (reparse-symbol function_parameters) [15973 15985])
                            ("is_secure" variable nil (reparse-symbol function_parameters) [16008 16017]))                          )
                        (reparse-symbol indented_block_body) [15923 16491])
                    ("_check_default_region" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16522 16526])
                            ("service_name" variable nil (reparse-symbol function_parameters) [16528 16540])
                            ("region_name" variable nil (reparse-symbol function_parameters) [16542 16553]))                          )
                        (reparse-symbol indented_block_body) [16496 16826])
                    ("_create_endpoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16852 16856])
                            ("resolved" variable nil (reparse-symbol function_parameters) [16858 16866])
                            ("service_name" variable nil (reparse-symbol function_parameters) [16868 16880])
                            ("region_name" variable nil (reparse-symbol function_parameters) [16882 16893])
                            ("endpoint_url" variable nil (reparse-symbol function_parameters) [16920 16932])
                            ("is_secure" variable nil (reparse-symbol function_parameters) [16934 16943]))                          )
                        (reparse-symbol indented_block_body) [16831 18086])
                    ("_is_s3_dualstack_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18117 18121])
                            ("service_name" variable nil (reparse-symbol function_parameters) [18123 18135]))                          )
                        (reparse-symbol indented_block_body) [18091 18975])
                    ("_create_dualstack_endpoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19011 19015])
                            ("service_name" variable nil (reparse-symbol function_parameters) [19017 19029])
                            ("region_name" variable nil (reparse-symbol function_parameters) [19031 19042])
                            ("dns_suffix" variable nil (reparse-symbol function_parameters) [19079 19089])
                            ("is_secure" variable nil (reparse-symbol function_parameters) [19091 19100]))                          )
                        (reparse-symbol indented_block_body) [18980 19483])
                    ("_assume_endpoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19509 19513])
                            ("service_name" variable nil (reparse-symbol function_parameters) [19515 19527])
                            ("region_name" variable nil (reparse-symbol function_parameters) [19529 19540])
                            ("endpoint_url" variable nil (reparse-symbol function_parameters) [19542 19554])
                            ("is_secure" variable nil (reparse-symbol function_parameters) [19581 19590]))                          )
                        (reparse-symbol indented_block_body) [19488 20576])
                    ("_create_result" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20600 20604])
                            ("service_name" variable nil (reparse-symbol function_parameters) [20606 20618])
                            ("region_name" variable nil (reparse-symbol function_parameters) [20620 20631])
                            ("signing_region" variable nil (reparse-symbol function_parameters) [20633 20647])
                            ("signing_name" variable nil (reparse-symbol function_parameters) [20672 20684])
                            ("endpoint_url" variable nil (reparse-symbol function_parameters) [20686 20698])
                            ("signature_version" variable nil (reparse-symbol function_parameters) [20700 20717])
                            ("metadata" variable nil (reparse-symbol function_parameters) [20742 20750]))                          )
                        (reparse-symbol indented_block_body) [20581 21077])
                    ("_make_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21096 21100])
                            ("hostname" variable nil (reparse-symbol function_parameters) [21102 21110])
                            ("is_secure" variable nil (reparse-symbol function_parameters) [21112 21121])
                            ("supported_protocols" variable nil (reparse-symbol function_parameters) [21123 21142]))                          )
                        (reparse-symbol indented_block_body) [21082 21319])
                    ("_resolve_signing_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21350 21354])
                            ("service_name" variable nil (reparse-symbol function_parameters) [21356 21368])
                            ("resolved" variable nil (reparse-symbol function_parameters) [21370 21378]))                          )
                        (reparse-symbol indented_block_body) [21324 21820])
                    ("_pick_region_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21849 21853])
                            ("resolved" variable nil (reparse-symbol function_parameters) [21855 21863])
                            ("region_name" variable nil (reparse-symbol function_parameters) [21865 21876])
                            ("endpoint_url" variable nil (reparse-symbol function_parameters) [21878 21890]))                          )
                        (reparse-symbol indented_block_body) [21825 23009])
                    ("_resolve_signature_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23045 23049])
                            ("service_name" variable nil (reparse-symbol function_parameters) [23051 23063])
                            ("resolved" variable nil (reparse-symbol function_parameters) [23065 23073]))                          )
                        (reparse-symbol indented_block_body) [23014 23975]))                  
                :type "class")
                nil [14903 23975])
            ("BaseClient" type
               (:superclasses ("object")
                :members 
                  ( ("_PY_TO_OP_NAME" variable nil (reparse-symbol indented_block_body) [24391 24410])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [24617 24646])
                            ("self" variable nil (reparse-symbol indented_block_body) [24655 24680])
                            ("self" variable nil (reparse-symbol indented_block_body) [24689 24728])
                            ("self" variable nil (reparse-symbol indented_block_body) [24737 24774])
                            ("self" variable nil (reparse-symbol indented_block_body) [24783 24799])
                            ("self" variable nil (reparse-symbol indented_block_body) [24808 24829])
                            ("self" variable nil (reparse-symbol indented_block_body) [24838 24873])
                            ("self" variable nil (reparse-symbol indented_block_body) [24882 25064])
                            ("self" variable nil (reparse-symbol indented_block_body) [25073 25118])
                            ("self" variable nil (reparse-symbol indented_block_body) [25127 25150])
                            ("self" code nil (reparse-symbol indented_block_body) [25159 25184]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24429 24433])
                            ("serializer" variable nil (reparse-symbol function_parameters) [24435 24445])
                            ("endpoint" variable nil (reparse-symbol function_parameters) [24447 24455])
                            ("response_parser" variable nil (reparse-symbol function_parameters) [24457 24472])
                            ("event_emitter" variable nil (reparse-symbol function_parameters) [24491 24504])
                            ("request_signer" variable nil (reparse-symbol function_parameters) [24506 24520])
                            ("service_model" variable nil (reparse-symbol function_parameters) [24522 24535])
                            ("loader" variable nil (reparse-symbol function_parameters) [24537 24543])
                            ("client_config" variable nil (reparse-symbol function_parameters) [24562 24575])
                            ("partition" variable nil (reparse-symbol function_parameters) [24577 24586])
                            ("exceptions_factory" variable nil (reparse-symbol function_parameters) [24588 24606]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24416 25185])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25206 25210])
                            ("item" variable nil (reparse-symbol function_parameters) [25212 25216]))                          )
                        (reparse-symbol indented_block_body) [25190 25622])
                    ("_register_handlers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25650 25654]))                          )
                        (reparse-symbol indented_block_body) [25627 25911])
                    ("_service_model" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25949 25953]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [25916 25995])
                    ("_make_api_call" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26019 26023])
                            ("operation_name" variable nil (reparse-symbol function_parameters) [26025 26039])
                            ("api_params" variable nil (reparse-symbol function_parameters) [26041 26051]))                          )
                        (reparse-symbol indented_block_body) [26000 27744])
                    ("_convert_to_request_dict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27778 27782])
                            ("api_params" variable nil (reparse-symbol function_parameters) [27784 27794])
                            ("operation_model" variable nil (reparse-symbol function_parameters) [27796 27811])
                            ("context" variable nil (reparse-symbol function_parameters) [27846 27853]))                          )
                        (reparse-symbol indented_block_body) [27749 29312])
                    ("get_paginator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29335 29339])
                            ("operation_name" variable nil (reparse-symbol function_parameters) [29341 29355]))                          
                        :documentation "Create a paginator for an operation.

        :type operation_name: string
        :param operation_name: The operation name.  This is the same name
            as the method name on the client.  For example, if the
            method name is ``create_foo``, and you'd normally invoke the
            operation as ``client.create_foo(**kwargs)``, if the
            ``create_foo`` operation can be paginated, you can use the
            call ``client.get_paginator(\"create_foo\")``.

        :raise OperationNotPageableError: Raised if the operation is not
            pageable.  You can use the ``client.can_paginate`` method to
            check if an operation is pageable.

        :rtype: L{botocore.paginate.Paginator}
        :return: A paginator object.

        ")
                        (reparse-symbol indented_block_body) [29317 31688])
                    ("can_paginate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31710 31714])
                            ("operation_name" variable nil (reparse-symbol function_parameters) [31716 31730]))                          
                        :documentation "Check if an operation can be paginated.

        :type operation_name: string
        :param operation_name: The operation name.  This is the same name
            as the method name on the client.  For example, if the
            method name is ``create_foo``, and you'd normally invoke the
            operation as ``client.create_foo(**kwargs)``, if the
            ``create_foo`` operation can be paginated, you can use the
            call ``client.get_paginator(\"create_foo\")``.

        :return: ``True`` if the operation can be paginated,
            ``False`` otherwise.

        ")
                        (reparse-symbol indented_block_body) [31693 32897])
                    ("_get_waiter_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32925 32929]))                          )
                        (reparse-symbol indented_block_body) [32902 33394])
                    ("get_waiter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33414 33418])
                            ("waiter_name" variable nil (reparse-symbol function_parameters) [33420 33431]))                          )
                        (reparse-symbol indented_block_body) [33399 33929])
                    ("waiter_names" function
                       (:parent "dummy"
                        :decorators 
                          ( ("CachedProperty" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33971 33975]))                          
                        :documentation "Returns a list of all available waiters.")
                        (reparse-symbol indented_block_body) [33934 34337])
                    ("exceptions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34371 34375]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [34342 34502])
                    ("_load_exceptions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34528 34532]))                          )
                        (reparse-symbol indented_block_body) [34507 34634]))                  
                :type "class")
                nil [23977 34634])
            ("ClientMeta" type
               (:documentation "Holds additional client methods.

    This class holds additional information for clients.  It exists for
    two reasons:

        * To give advanced functionality to clients
        * To namespace additional client attributes from the operation
          names which are mapped to methods at runtime.  This avoids
          ever running into collisions with operation names.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [35191 35211])
                            ("self" variable nil (reparse-symbol indented_block_body) [35220 35255])
                            ("self" variable nil (reparse-symbol indented_block_body) [35264 35297])
                            ("self" variable nil (reparse-symbol indented_block_body) [35306 35341])
                            ("self" variable nil (reparse-symbol indented_block_body) [35350 35401])
                            ("self" variable nil (reparse-symbol indented_block_body) [35410 35437]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35073 35077])
                            ("events" variable nil (reparse-symbol function_parameters) [35079 35085])
                            ("client_config" variable nil (reparse-symbol function_parameters) [35087 35100])
                            ("endpoint_url" variable nil (reparse-symbol function_parameters) [35102 35114])
                            ("service_model" variable nil (reparse-symbol function_parameters) [35116 35129])
                            ("method_to_api_mapping" variable nil (reparse-symbol function_parameters) [35148 35169])
                            ("partition" variable nil (reparse-symbol function_parameters) [35171 35180]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [35060 35438])
                    ("service_model" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35475 35479]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [35443 35517])
                    ("region_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35552 35556]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [35522 35606])
                    ("endpoint_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35642 35646]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [35611 35683])
                    ("config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35713 35717]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [35688 35755])
                    ("method_to_api_mapping" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35800 35804]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [35760 35850])
                    ("partition" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35883 35887]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [35855 35921]))                  
                :type "class")
                nil [34636 35921])
            ("_get_configured_signature_version" function
               (:documentation "
    Gets the manually configured signature version.

    :returns: the customer configured signature version, or None if no
        signature version was configured.
    "
                :arguments 
                  ( ("service_name" variable nil (reparse-symbol function_parameters) [35961 35973])
                    ("client_config" variable nil (reparse-symbol function_parameters) [35975 35988])
                    ("scoped_config" variable nil (reparse-symbol function_parameters) [36028 36041]))                  )
                nil [35923 37090]))          
      :file "client.py"
      :pointmax 37090
      :fsize 37089
      :lastmodtime '(22858 51697 182173 13000)
      :unmatched-syntax nil)
    (semanticdb-table "utils.py"
      :major-mode 'python-mode
      :tags 
        '( ("re" include nil nil [567 576])
            ("time" include nil nil [577 588])
            ("logging" include nil nil [589 603])
            ("datetime" include nil nil [604 619])
            ("hashlib" include nil nil [620 634])
            ("binascii" include nil nil [635 650])
            ("functools" include nil nil [651 667])
            ("weakref" include nil nil [668 682])
            ("dateutil.parser" include nil nil [684 706])
            ("dateutil.tz" include nil nil [707 745])
            ("botocore" include nil nil [747 762])
            ("botocore.exceptions" include nil nil [763 833])
            ("botocore.exceptions" include nil nil [834 898])
            ("botocore.exceptions" include nil nil [899 953])
            ("botocore.compat" include nil nil [954 1028])
            ("botocore.vendored" include nil nil [1029 1067])
            ("botocore.compat" include nil nil [1068 1112])
            ("logger" variable nil nil [1115 1151])
            ("DEFAULT_METADATA_SERVICE_TIMEOUT" variable nil nil [1152 1188])
            ("METADATA_SECURITY_CREDENTIALS_URL" variable nil nil [1189 1300])
            ("SAFE_CHARS" variable nil nil [1386 1405])
            ("LABEL_RE" variable nil nil [1406 1458])
            ("RESTRICTED_REGIONS" variable nil nil [1459 1530])
            ("RETRYABLE_HTTP_ERRORS" variable nil nil [1531 1599])
            ("S3_ACCELERATE_WHITELIST" variable nil nil [1600 1639])
            ("_RetriesExceededError" type
               (:documentation "Internal exception used when the number of retries are exceeded."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [1761 1765]))                  
                :type "class")
                nil [1642 1766])
            ("is_json_value_header" function
               (:documentation "Determines if the provided shape is the special header type jsonvalue.

    :type shape: botocore.shape
    :param shape: Shape to be inspected for the jsonvalue trait.

    :return: True if this type is a jsonvalue, False otherwise
    :rtype: Bool
    "
                :arguments 
                  ( ("shape" variable nil (reparse-symbol function_parameters) [1793 1798]))                  )
                nil [1768 2279])
            ("get_service_module_name" function
               (:documentation "Returns the module name for a service

    This is the value used in both the documentation and client class name
    "
                :arguments 
                  ( ("service_model" variable nil (reparse-symbol function_parameters) [2309 2322]))                  )
                nil [2281 2744])
            ("normalize_url_path" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [2769 2773]))              ) nil [2746 2849])
            ("remove_dot_segments" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [2875 2878]))              ) nil [2851 3530])
            ("validate_jmespath_for_set" function (:arguments 
              ( ("expression" variable nil (reparse-symbol function_parameters) [3562 3572]))              ) nil [3532 3944])
            ("set_value_from_jmespath" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [3974 3980])
                ("expression" variable nil (reparse-symbol function_parameters) [3982 3992])
                ("value" variable nil (reparse-symbol function_parameters) [3994 3999])
                ("is_first" variable nil (reparse-symbol function_parameters) [4001 4009]))              ) nil [3946 4979])
            ("InstanceMetadataFetcher" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5166 5189])
                            ("self" variable nil (reparse-symbol indented_block_body) [5198 5231])
                            ("self" variable nil (reparse-symbol indented_block_body) [5240 5255]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5037 5041])
                            ("timeout" variable nil (reparse-symbol function_parameters) [5043 5050])
                            ("num_attempts" variable nil (reparse-symbol function_parameters) [5102 5114])
                            ("url" variable nil (reparse-symbol function_parameters) [5118 5121]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5024 5256])
                    ("_get_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5278 5282])
                            ("url" variable nil (reparse-symbol function_parameters) [5284 5287])
                            ("timeout" variable nil (reparse-symbol function_parameters) [5289 5296])
                            ("num_attempts" variable nil (reparse-symbol function_parameters) [5298 5310]))                          )
                        (reparse-symbol indented_block_body) [5261 5759])
                    ("retrieve_iam_role_credentials" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5798 5802]))                          )
                        (reparse-symbol indented_block_body) [5764 7700]))                  
                :type "class")
                nil [4981 7700])
            ("merge_dicts" function
               (:documentation "Given two dict, merge the second dict into the first.

    The dicts can have arbitrary nesting.

    :param append_lists: If true, instead of clobbering a list with the new
        value, append all of the new values onto the original list.
    "
                :arguments 
                  ( ("dict1" variable nil (reparse-symbol function_parameters) [7718 7723])
                    ("dict2" variable nil (reparse-symbol function_parameters) [7725 7730])
                    ("append_lists" variable nil (reparse-symbol function_parameters) [7732 7744]))                  )
                nil [7702 8830])
            ("parse_key_val_file" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [8855 8863])
                ("_open" variable nil (reparse-symbol function_parameters) [8865 8870]))              ) nil [8832 9075])
            ("parse_key_val_file_contents" function (:arguments 
              ( ("contents" variable nil (reparse-symbol function_parameters) [9109 9117]))              ) nil [9077 9544])
            ("percent_encode_sequence" function
               (:documentation "Urlencode a dict or list into a string.

    This is similar to urllib.urlencode except that:

    * It uses quote, and not quote_plus
    * It has a default list of safe chars that don't need
      to be encoded, which matches what AWS services expect.

    If any value in the input ``mapping`` is a list type,
    then each list element wil be serialized.  This is the equivalent
    to ``urlencode``'s ``doseq=True`` argument.

    This function should be preferred over the stdlib
    ``urlencode()`` function.

    :param mapping: Either a dict to urlencode or a list of
        ``(key, value)`` pairs.

    "
                :arguments 
                  ( ("mapping" variable nil (reparse-symbol function_parameters) [9574 9581])
                    ("safe" variable nil (reparse-symbol function_parameters) [9583 9587]))                  )
                nil [9546 10773])
            ("percent_encode" function
               (:documentation "Urlencodes a string.

    Whereas percent_encode_sequence handles taking a dict/sequence and
    producing a percent encoded string, this function deals only with
    taking a string (not a dict/sequence) and percent encoding it.

    If given the binary type, will simply URL encode it. If given the
    text type, will produce the binary type by UTF-8 encoding the
    text. If given something else, will convert it to the the text type
    first.
    "
                :arguments 
                  ( ("input_str" variable nil (reparse-symbol function_parameters) [10794 10803])
                    ("safe" variable nil (reparse-symbol function_parameters) [10805 10809]))                  )
                nil [10775 11663])
            ("parse_timestamp" function
               (:documentation "Parse a timestamp into a datetime object.

    Supported formats:

        * iso8601
        * rfc822
        * epoch (value is an integer)

    This will return a ``datetime.datetime`` object.

    "
                :arguments 
                  ( ("value" variable nil (reparse-symbol function_parameters) [11685 11690]))                  )
                nil [11665 12569])
            ("parse_to_aware_datetime" function
               (:documentation "Converted the passed in value to a datetime object with tzinfo.

    This function can be used to normalize all timestamp inputs.  This
    function accepts a number of different types of inputs, but
    will always return a datetime.datetime object with time zone
    information.

    The input param ``value`` can be one of several types:

        * A datetime object (both naive and aware)
        * An integer representing the epoch time (can also be a string
          of the integer, i.e '0', instead of 0).  The epoch time is
          considered to be UTC.
        * An iso8601 formatted timestamp.  This does not need to be
          a complete timestamp, it can contain just the date portion
          without the time component.

    The returned value will be a datetime object that will have tzinfo.
    If no timezone info was provided in the input value, then UTC is
    assumed, not local time.

    "
                :arguments 
                  ( ("value" variable nil (reparse-symbol function_parameters) [12599 12604]))                  )
                nil [12571 14518])
            ("datetime2timestamp" function
               (:documentation "Calculate the timestamp based on the given datetime instance.

    :type dt: datetime
    :param dt: A datetime object to be converted into timestamp
    :type default_timezone: tzinfo
    :param default_timezone: If it is provided as None, we treat it as tzutc().
                             But it is only used when dt is a naive datetime.
    :returns: The timestamp
    "
                :arguments 
                  ( ("dt" variable nil (reparse-symbol function_parameters) [14543 14545])
                    ("default_timezone" variable nil (reparse-symbol function_parameters) [14547 14563]))                  )
                nil [14520 15379])
            ("calculate_sha256" function
               (:documentation "Calculate a sha256 checksum.

    This method will calculate the sha256 checksum of a file like
    object.  Note that this method will iterate through the entire
    file contents.  The caller is responsible for ensuring the proper
    starting position of the file and ``seek()``'ing the file back
    to its starting location if other consumers need to read from
    the file like object.

    :param body: Any file like object.  The file must be opened
        in binary mode such that a ``.read()`` call returns bytes.
    :param as_hex: If True, then the hex digest is returned.
        If False, then the digest (as binary bytes) is returned.

    :returns: The sha256 checksum

    "
                :arguments 
                  ( ("body" variable nil (reparse-symbol function_parameters) [15402 15406])
                    ("as_hex" variable nil (reparse-symbol function_parameters) [15408 15414]))                  )
                nil [15381 16341])
            ("calculate_tree_hash" function
               (:documentation "Calculate a tree hash checksum.

    For more information see:

    http://docs.aws.amazon.com/amazonglacier/latest/dev/checksum-calculations.html

    :param body: Any file like object.  This has the same constraints as
        the ``body`` param in calculate_sha256

    :rtype: str
    :returns: The hex version of the calculated tree hash

    "
                :arguments 
                  ( ("body" variable nil (reparse-symbol function_parameters) [16367 16371]))                  )
                nil [16343 17403])
            ("_in_pairs" function (:arguments 
              ( ("iterable" variable nil (reparse-symbol function_parameters) [17419 17427]))              ) nil [17405 17896])
            ("CachedProperty" type
               (:documentation "A read only property that caches the initially computed value.

    This descriptor will only call the provided ``fget`` function once.
    Subsequent access to this property will return the cached value.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [18188 18205]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18167 18171])
                            ("fget" variable nil (reparse-symbol function_parameters) [18173 18177]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18154 18206])
                    ("__get__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18223 18227])
                            ("obj" variable nil (reparse-symbol function_parameters) [18229 18232])
                            ("cls" variable nil (reparse-symbol function_parameters) [18234 18237]))                          )
                        (reparse-symbol indented_block_body) [18211 18444]))                  
                :type "class")
                nil [17898 18444])
            ("ArgumentGenerator" type
               (:documentation "Generate sample input based on a shape model.

    This class contains a ``generate_skeleton`` method that will take
    an input/output shape (created from ``botocore.model``) and generate
    a sample dictionary corresponding to the input/output shape.

    The specific values used are place holder values. For strings either an
    empty string or the member name can be used, for numbers 0 or 0.0 is used.
    The intended usage of this class is to generate the *shape* of the input
    structure.

    This can be useful for operations that have complex input shapes.
    This allows a user to just fill in the necessary data instead of
    worrying about the specific structure of the input arguments.

    Example usage::

        s = botocore.session.get_session()
        ddb = s.get_service_model('dynamodb')
        arg_gen = ArgumentGenerator()
        sample_input = arg_gen.generate_skeleton(
            ddb.operation_model('CreateTable').input_shape)
        print(\"Sample input for dynamodb.CreateTable: %s\" % sample_input)

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [19593 19634]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19554 19558])
                            ("use_member_names" variable nil (reparse-symbol function_parameters) [19560 19576]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [19541 19635])
                    ("generate_skeleton" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19662 19666])
                            ("shape" variable nil (reparse-symbol function_parameters) [19668 19673]))                          
                        :documentation "Generate a sample input.

        :type shape: ``botocore.model.Shape``
        :param shape: The input shape.

        :return: The generated skeleton input corresponding to the
            provided input shape.

        ")
                        (reparse-symbol indented_block_body) [19640 19985])
                    ("_generate_skeleton" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20013 20017])
                            ("shape" variable nil (reparse-symbol function_parameters) [20019 20024])
                            ("stack" variable nil (reparse-symbol function_parameters) [20026 20031])
                            ("name" variable nil (reparse-symbol function_parameters) [20033 20037]))                          )
                        (reparse-symbol indented_block_body) [19990 20941])
                    ("_generate_type_structure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20975 20979])
                            ("shape" variable nil (reparse-symbol function_parameters) [20981 20986])
                            ("stack" variable nil (reparse-symbol function_parameters) [20988 20993]))                          )
                        (reparse-symbol indented_block_body) [20946 21295])
                    ("_generate_type_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21324 21328])
                            ("shape" variable nil (reparse-symbol function_parameters) [21330 21335])
                            ("stack" variable nil (reparse-symbol function_parameters) [21337 21342]))                          )
                        (reparse-symbol indented_block_body) [21300 21636])
                    ("_generate_type_map" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21664 21668])
                            ("shape" variable nil (reparse-symbol function_parameters) [21670 21675])
                            ("stack" variable nil (reparse-symbol function_parameters) [21677 21682]))                          )
                        (reparse-symbol indented_block_body) [21641 21906]))                  
                :type "class")
                nil [18446 21906])
            ("is_valid_endpoint_url" function
               (:documentation "Verify the endpoint_url is valid.

    :type endpoint_url: string
    :param endpoint_url: An endpoint_url.  Must have at least a scheme
        and a hostname.

    :return: True if the endpoint url is valid. False otherwise.

    "
                :arguments 
                  ( ("endpoint_url" variable nil (reparse-symbol function_parameters) [21934 21946]))                  )
                nil [21908 22568])
            ("check_dns_name" function
               (:documentation "
    Check to see if the ``bucket_name`` complies with the
    restricted DNS naming conventions necessary to allow
    access via virtual-hosting style.

    Even though \".\" characters are perfectly valid in this DNS
    naming scheme, we are going to punt on any name containing a
    \".\" character because these will cause SSL cert validation
    problems if we try to use virtual-hosting style addressing.
    "
                :arguments 
                  ( ("bucket_name" variable nil (reparse-symbol function_parameters) [22589 22600]))                  )
                nil [22570 23381])
            ("fix_s3_host" function
               (:documentation "
    This handler looks at S3 requests just before they are signed.
    If there is a bucket name on the path (true for everything except
    ListAllBuckets) it checks to see if that bucket name conforms to
    the DNS naming conventions.  If it does, it alters the request to
    use ``virtual hosting`` style addressing rather than ``path-style``
    addressing.  This allows us to avoid 301 redirects for all
    bucket names that can be CNAME'd.
    "
                :arguments 
                  ( ("request" variable nil (reparse-symbol function_parameters) [23399 23406])
                    ("signature_version" variable nil (reparse-symbol function_parameters) [23408 23425])
                    ("region_name" variable nil (reparse-symbol function_parameters) [23427 23438])
                    ("default_endpoint_url" variable nil (reparse-symbol function_parameters) [23456 23476])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [23497 23505]))                  )
                nil [23383 24551])
            ("switch_to_virtual_host_style" function
               (:documentation "
    This is a handler to force virtual host style s3 addressing no matter
    the signature version (which is taken in consideration for the default
    case). If the bucket is not DNS compatible an InvalidDNSName is thrown.

    :param request: A AWSRequest object that is about to be sent.
    :param signature_version: The signature version to sign with
    :param default_endpoint_url: The endpoint to use when switching to a
        virtual style. If None is supplied, the virtual host will be
        constructed from the url of the request.
    "
                :arguments 
                  ( ("request" variable nil (reparse-symbol function_parameters) [24586 24593])
                    ("signature_version" variable nil (reparse-symbol function_parameters) [24595 24612])
                    ("default_endpoint_url" variable nil (reparse-symbol function_parameters) [24647 24667])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [24674 24682]))                  )
                nil [24553 27394])
            ("_is_get_bucket_location_request" function (:arguments 
              ( ("request" variable nil (reparse-symbol function_parameters) [27432 27439]))              ) nil [27396 27487])
            ("_allowed_region" function (:arguments 
              ( ("region_name" variable nil (reparse-symbol function_parameters) [27509 27520]))              ) nil [27489 27572])
            ("instance_cache" function
               (:documentation "Method decorator for caching method calls to a single instance.

    **This is not a general purpose caching decorator.**

    In order to use this, you *must* provide an ``_instance_cache``
    attribute on the instance.

    This decorator is used to cache method calls.  The cache is only
    scoped to a single instance though such that multiple instances
    will maintain their own cache.  In order to keep things simple,
    this decorator requires that you provide an ``_instance_cache``
    attribute on your instance.

    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [27593 27597]))                  )
                nil [27574 28665])
            ("switch_host_s3_accelerate" function
               (:documentation "Switches the current s3 endpoint with an S3 Accelerate endpoint"
                :arguments 
                  ( ("request" variable nil (reparse-symbol function_parameters) [28697 28704])
                    ("operation_name" variable nil (reparse-symbol function_parameters) [28706 28720])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [28722 28730]))                  )
                nil [28667 29477])
            ("switch_host_with_param" function
               (:documentation "Switches the host using a parameter value from a JSON request body"
                :arguments 
                  ( ("request" variable nil (reparse-symbol function_parameters) [29506 29513])
                    ("param_name" variable nil (reparse-symbol function_parameters) [29515 29525]))                  )
                nil [29479 29795])
            ("_switch_hosts" function (:arguments 
              ( ("request" variable nil (reparse-symbol function_parameters) [29815 29822])
                ("new_endpoint" variable nil (reparse-symbol function_parameters) [29824 29836])
                ("use_new_scheme" variable nil (reparse-symbol function_parameters) [29838 29852]))              ) nil [29797 29984])
            ("_get_new_endpoint" function (:arguments 
              ( ("original_endpoint" variable nil (reparse-symbol function_parameters) [30008 30025])
                ("new_endpoint" variable nil (reparse-symbol function_parameters) [30027 30039])
                ("use_new_scheme" variable nil (reparse-symbol function_parameters) [30041 30055]))              ) nil [29986 30672])
            ("deep_merge" function
               (:documentation "Deeply two dictionaries, overriding existing keys in the base.

    :param base: The base dictionary which will be merged into.
    :param extra: The dictionary to merge into the base. Keys from this
        dictionary will take precedence.
    "
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [30689 30693])
                    ("extra" variable nil (reparse-symbol function_parameters) [30695 30700]))                  )
                nil [30674 31341])
            ("S3RegionRedirector" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [31446 31487])
                            ("self" variable nil (reparse-symbol indented_block_body) [31496 31515])
                            ("if" code nil (reparse-symbol indented_block_body) [31524 31577])
                            ("self" variable nil (reparse-symbol indented_block_body) [31681 31717]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31394 31398])
                            ("endpoint_bridge" variable nil (reparse-symbol function_parameters) [31400 31415])
                            ("client" variable nil (reparse-symbol function_parameters) [31417 31423])
                            ("cache" variable nil (reparse-symbol function_parameters) [31425 31430]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31381 31718])
                    ("register" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31736 31740])
                            ("event_emitter" variable nil (reparse-symbol function_parameters) [31742 31755]))                          )
                        (reparse-symbol indented_block_body) [31723 32062])
                    ("redirect_from_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32091 32095])
                            ("request_dict" variable nil (reparse-symbol function_parameters) [32097 32109])
                            ("response" variable nil (reparse-symbol function_parameters) [32111 32119])
                            ("operation" variable nil (reparse-symbol function_parameters) [32121 32130])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [32132 32140]))                          
                        :documentation "
        An S3 request sent to the wrong region will return an error that
        contains the endpoint the request should be sent to. This handler
        will add the redirect information to the signing context and then
        redirect the request.
        ")
                        (reparse-symbol indented_block_body) [32067 34385])
                    ("get_bucket_region" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34412 34416])
                            ("bucket" variable nil (reparse-symbol function_parameters) [34418 34424])
                            ("response" variable nil (reparse-symbol function_parameters) [34426 34434]))                          
                        :documentation "
        There are multiple potential sources for the new region to redirect to,
        but they aren't all universally available for use. This will try to
        find region from response elements, but will fall back to calling
        HEAD on the bucket if all else fails.

        :param bucket: The bucket to find the region for. This is necessary if
            the region is not available in the error response.
        :param response: A response representing a service request that failed
            due to incorrect region configuration.
        ")
                        (reparse-symbol indented_block_body) [34390 35850])
                    ("set_request_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35875 35879])
                            ("params" variable nil (reparse-symbol function_parameters) [35881 35887])
                            ("context" variable nil (reparse-symbol function_parameters) [35889 35896])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [35898 35906]))                          )
                        (reparse-symbol indented_block_body) [35855 36088])
                    ("redirect_from_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36117 36121])
                            ("params" variable nil (reparse-symbol function_parameters) [36123 36129])
                            ("context" variable nil (reparse-symbol function_parameters) [36131 36138])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [36140 36148]))                          
                        :documentation "
        This handler retrieves a given bucket's signing context from the cache
        and adds it into the request context.
        ")
                        (reparse-symbol indented_block_body) [36093 36543]))                  
                :type "class")
                nil [31343 36543])
            ("ContainerMetadataFetcher" type
               (:superclasses ("object")
                :members 
                  ( ("TIMEOUT_SECONDS" variable nil (reparse-symbol indented_block_body) [36590 36609])
                    ("RETRY_ATTEMPTS" variable nil (reparse-symbol indented_block_body) [36614 36632])
                    ("SLEEP_TIME" variable nil (reparse-symbol indented_block_body) [36637 36651])
                    ("IP_ADDRESS" variable nil (reparse-symbol indented_block_body) [36656 36684])
                    ("_ALLOWED_HOSTS" variable nil (reparse-symbol indented_block_body) [36689 36744])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [36810 36871])
                            ("self" variable nil (reparse-symbol indented_block_body) [36879 36902])
                            ("self" variable nil (reparse-symbol indented_block_body) [36911 36930]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36763 36767])
                            ("session" variable nil (reparse-symbol function_parameters) [36769 36776])
                            ("sleep" variable nil (reparse-symbol function_parameters) [36783 36788]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36750 36931])
                    ("retrieve_full_uri" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36958 36962])
                            ("full_url" variable nil (reparse-symbol function_parameters) [36964 36972])
                            ("headers" variable nil (reparse-symbol function_parameters) [36974 36981]))                          
                        :documentation "Retrieve JSON metadata from container metadata.

        :type full_url: str
        :param full_url: The full URL of the metadata service.
            This should include the scheme as well, e.g
            \"http://localhost:123/foo\"

        ")
                        (reparse-symbol indented_block_body) [36936 37354])
                    ("_validate_allowed_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37385 37389])
                            ("full_url" variable nil (reparse-symbol function_parameters) [37391 37399]))                          )
                        (reparse-symbol indented_block_body) [37359 37790])
                    ("_check_if_whitelisted_host" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37826 37830])
                            ("host" variable nil (reparse-symbol function_parameters) [37832 37836]))                          )
                        (reparse-symbol indented_block_body) [37795 37924])
                    ("retrieve_uri" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37946 37950])
                            ("relative_uri" variable nil (reparse-symbol function_parameters) [37952 37964]))                          
                        :documentation "Retrieve JSON metadata from ECS metadata.

        :type relative_uri: str
        :param relative_uri: A relative URI, e.g \"/foo/bar?id=123\"

        :return: The parsed JSON response.

        ")
                        (reparse-symbol indented_block_body) [37929 38276])
                    ("_retrieve_credentials" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38307 38311])
                            ("full_url" variable nil (reparse-symbol function_parameters) [38313 38321])
                            ("extra_headers" variable nil (reparse-symbol function_parameters) [38323 38336]))                          )
                        (reparse-symbol indented_block_body) [38281 38963])
                    ("_get_response" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38986 38990])
                            ("full_url" variable nil (reparse-symbol function_parameters) [38992 39000])
                            ("headers" variable nil (reparse-symbol function_parameters) [39002 39009])
                            ("timeout" variable nil (reparse-symbol function_parameters) [39011 39018]))                          )
                        (reparse-symbol indented_block_body) [38968 39901])
                    ("full_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39919 39923])
                            ("relative_uri" variable nil (reparse-symbol function_parameters) [39925 39937]))                          )
                        (reparse-symbol indented_block_body) [39906 40003]))                  
                :type "class")
                nil [36545 40003]))          
      :file "utils.py"
      :pointmax 40003
      :fsize 40002
      :lastmodtime '(22858 51697 178173 303000)
      :unmatched-syntax '((INDENT_BLOCK 39719 . 39901) (NEWLINE 39718 . 39719) (COLON 39717 . 39718) (TRY 39029 . 39032) (AS 39713 . 39715) (INDENT_BLOCK 38662 . 38963) (NEWLINE 38661 . 38662) (COLON 38660 . 38661) (TRY 38526 . 38529) (AS 38656 . 38658) (INDENT_BLOCK 35701 . 35769) (NEWLINE 35700 . 35701) (COLON 35699 . 35700) (TRY 35534 . 35537) (AS 35695 . 35697) (INDENT_BLOCK 24396 . 24551) (NEWLINE 24395 . 24396) (COLON 24394 . 24395) (TRY 24254 . 24257) (AS 24390 . 24392) (INDENT_BLOCK 12501 . 12569) (NEWLINE 12500 . 12501) (COLON 12499 . 12500) (TRY 12202 . 12205) (AS 12495 . 12497) (INDENT_BLOCK 5637 . 5721) (NEWLINE 5636 . 5637) (COLON 5635 . 5636) (ELSE 5631 . 5635) (INDENT_BLOCK 5479 . 5619) (NEWLINE 5478 . 5479) (COLON 5477 . 5478) (TRY 5365 . 5368) (AS 5473 . 5475) (NAME 4308 . 4319) (IF 4350 . 4352) (ELSE 4367 . 4371)))
    (semanticdb-table "__init__.py"
      :major-mode 'python-mode
      :tags 
        '( ("os" include nil nil [628 637])
            ("re" include nil nil [638 647])
            ("logging" include nil nil [648 662])
            ("__version__" variable nil nil [664 686])
            ("NullHandler" type
               (:superclasses ("logging.Handler")
                :members 
                  ( ("emit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [738 742])
                            ("record" variable nil (reparse-symbol function_parameters) [744 750]))                          )
                        (reparse-symbol indented_block_body) [729 766]))                  
                :type "class")
                nil [689 766])
            ("log" variable nil nil [808 843])
            ("log" code nil nil [844 873])
            ("_first_cap_regex" variable nil nil [876 925])
            ("_number_cap_regex" variable nil nil [926 975])
            ("_end_cap_regex" variable nil nil [976 1024])
            ("_special_case_transform" variable nil nil [1152 1203])
            ("_xform_cache" variable nil nil [1294 2038])
            ("_partial_renames" variable nil nil [2277 2341])
            ("ScalarTypes" variable nil nil [2342 2420])
            ("BOTOCORE_ROOT" variable nil nil [2422 2480])
            ("UNSIGNED" variable nil nil [2539 2558])
            ("xform_name" function
               (:documentation "Convert camel case to a \"pythonic\" name.

    If the name contains the ``sep`` character, then it is
    returned unchanged.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [2576 2580])
                    ("sep" variable nil (reparse-symbol function_parameters) [2582 2585])
                    ("_xform_cache" variable nil (reparse-symbol function_parameters) [2591 2603])
                    ("partial_renames" variable nil (reparse-symbol function_parameters) [2633 2648]))                  )
                nil [2561 3753]))          
      :file "__init__.py"
      :pointmax 3753
      :fsize 3752
      :lastmodtime '(22858 51697 178173 303000)
      :unmatched-syntax nil))
  :file "!home!philip!.virtualenvs!cidade-alerta!lib!python3.5!site-packages!botocore!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")

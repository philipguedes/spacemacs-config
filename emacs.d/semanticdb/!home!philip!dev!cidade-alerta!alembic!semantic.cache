;; Object alembic/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "alembic/"
  :tables
  (list
    (semanticdb-table "env.py"
      :major-mode 'python-mode
      :tags 
        '( ("__future__" include nil nil [1 38])
            ("alembic" include nil nil [39 66])
            ("sqlalchemy" include nil nil [67 114])
            ("logging.config" include nil nil [115 152])
            ("sys" include nil nil [154 164])
            ("os.path" include nil nil [165 201])
            ("sys" code nil nil [202 254])
            ("cidadealerta.models" include nil nil [256 289])
            ("cidadealerta.core" include nil nil [290 322])
            ("cidadealerta.api" include nil nil [323 362])
            ("app" variable nil nil [364 382])
            ("config" variable nil nil [488 511])
            ("fileConfig" code nil nil [600 635])
            ("target_metadata" variable nil nil [776 805])
            ("run_migrations_offline" function (:documentation "Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    ") nil [973 1556])
            ("run_migrations_online" function (:documentation "Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    ") nil [1558 2279])
            ("if" code nil nil [2280 2373]))          
      :file "env.py"
      :pointmax 2373
      :fsize 2372
      :lastmodtime '(22819 15446 40976 161000)
      :unmatched-syntax nil))
  :file "!home!philip!dev!cidade-alerta!alembic!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")

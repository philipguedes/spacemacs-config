;; Object sqlalchemy/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "sqlalchemy/"
  :tables
  (list
    (semanticdb-table "log.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Logging control and utilities.

Control of logging for SA can be performed from the regular python logging
module.  The regular dotted module namespace is used, starting at
'sqlalchemy'.  For class-level logging, the class name is appended.

The \"echo\" keyword parameter, available on SQLA :class:`.Engine`
and :class:`.Pool` objects, corresponds to a logger specific to that
instance only.

\"\"\"" code nil nil [301 699])
            ("logging" include nil nil [701 715])
            ("sys" include nil nil [716 726])
            ("rootlogger" variable nil nil [869 913])
            ("if" code nil nil [914 991])
            ("_add_default_handler" function (:arguments 
              ( ("logger" variable nil (reparse-symbol function_parameters) [1018 1024]))              ) nil [993 1209])
            ("_logged_classes" variable nil nil [1211 1234])
            ("class_logger" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [1254 1257]))              ) nil [1237 1546])
            ("Identified" type
               (:superclasses ("object")
                :members 
                  ( ("logging_name" variable nil (reparse-symbol indented_block_body) [1578 1597])
                    ("_should_log_debug" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1625 1629]))                          )
                        (reparse-symbol indented_block_body) [1603 1687])
                    ("_should_log_info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1713 1717]))                          )
                        (reparse-symbol indented_block_body) [1692 1774]))                  
                :type "class")
                nil [1548 1774])
            ("InstanceLogger" type
               (:documentation "A logger adapter (wrapper) for :class:`.Identified` subclasses.

    This allows multiple instances (e.g. Engine or Pool instances)
    to share a logger, but have its verbosity controlled on a
    per-instance basis.

    The basic functionality is to return a logging level
    which is based on an instance's echo setting.

    Default implementation is:

    'debug' -> logging.DEBUG
    True    -> logging.INFO
    False   -> Effective level of underlying logger
               (logging.WARNING by default)
    None    -> same as False
    "
                :superclasses ("object")
                :members 
                  ( ("_echo_map" variable nil (reparse-symbol indented_block_body) [2408 2548])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2594 2610])
                            ("self" variable nil (reparse-symbol indented_block_body) [2619 2656])
                            ("if" code nil (reparse-symbol indented_block_body) [2753 2882]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2567 2571])
                            ("echo" variable nil (reparse-symbol function_parameters) [2573 2577])
                            ("name" variable nil (reparse-symbol function_parameters) [2579 2583]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2554 2882])
                    ("debug" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2947 2951])
                            ("msg" variable nil (reparse-symbol function_parameters) [2953 2956])
                            ("args" variable nil (reparse-symbol function_parameters) [2958 2963])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [2965 2973]))                          
                        :documentation "Delegate a debug call to the underlying logger.")
                        (reparse-symbol indented_block_body) [2937 3093])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3107 3111])
                            ("msg" variable nil (reparse-symbol function_parameters) [3113 3116])
                            ("args" variable nil (reparse-symbol function_parameters) [3118 3123])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3125 3133]))                          
                        :documentation "Delegate an info call to the underlying logger.")
                        (reparse-symbol indented_block_body) [3098 3252])
                    ("warning" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3269 3273])
                            ("msg" variable nil (reparse-symbol function_parameters) [3275 3278])
                            ("args" variable nil (reparse-symbol function_parameters) [3280 3285])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3287 3295]))                          
                        :documentation "Delegate a warning call to the underlying logger.")
                        (reparse-symbol indented_block_body) [3257 3419])
                    ("warn" variable nil (reparse-symbol indented_block_body) [3424 3438])
                    ("error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3454 3458])
                            ("msg" variable nil (reparse-symbol function_parameters) [3460 3463])
                            ("args" variable nil (reparse-symbol function_parameters) [3465 3470])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3472 3480]))                          
                        :documentation "
        Delegate an error call to the underlying logger.
        ")
                        (reparse-symbol indented_block_body) [3444 3618])
                    ("exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3637 3641])
                            ("msg" variable nil (reparse-symbol function_parameters) [3643 3646])
                            ("args" variable nil (reparse-symbol function_parameters) [3648 3653])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3655 3663]))                          
                        :documentation "Delegate an exception call to the underlying logger.")
                        (reparse-symbol indented_block_body) [3623 3819])
                    ("critical" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3837 3841])
                            ("msg" variable nil (reparse-symbol function_parameters) [3843 3846])
                            ("args" variable nil (reparse-symbol function_parameters) [3848 3853])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3855 3863]))                          
                        :documentation "Delegate a critical call to the underlying logger.")
                        (reparse-symbol indented_block_body) [3824 3989])
                    ("log" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4002 4006])
                            ("level" variable nil (reparse-symbol function_parameters) [4008 4013])
                            ("msg" variable nil (reparse-symbol function_parameters) [4015 4018])
                            ("args" variable nil (reparse-symbol function_parameters) [4020 4025])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4027 4035]))                          
                        :documentation "Delegate a log call to the underlying logger.

        The level here is determined by the echo
        flag as well as that of the underlying logger, and
        logger._log() is called directly.

        ")
                        (reparse-symbol indented_block_body) [3994 4679])
                    ("isEnabledFor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4701 4705])
                            ("level" variable nil (reparse-symbol function_parameters) [4707 4712]))                          
                        :documentation "Is this logger enabled for level 'level'?")
                        (reparse-symbol indented_block_body) [4684 4895])
                    ("getEffectiveLevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4922 4926]))                          
                        :documentation "What's the effective level for this logger?")
                        (reparse-symbol indented_block_body) [4900 5139]))                  
                :type "class")
                nil [1776 5139])
            ("instance_logger" function
               (:documentation "create a logger for an instance that implements :class:`.Identified`."
                :arguments 
                  ( ("instance" variable nil (reparse-symbol function_parameters) [5161 5169])
                    ("echoflag" variable nil (reparse-symbol function_parameters) [5171 5179]))                  )
                nil [5141 6045])
            ("echo_property" type
               (:superclasses ("object")
                :members 
                  ( ("__doc__" variable nil (reparse-symbol indented_block_body) [6080 6479])
                    ("__get__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6497 6501])
                            ("instance" variable nil (reparse-symbol function_parameters) [6503 6511])
                            ("owner" variable nil (reparse-symbol function_parameters) [6513 6518]))                          )
                        (reparse-symbol indented_block_body) [6485 6622])
                    ("__set__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6639 6643])
                            ("instance" variable nil (reparse-symbol function_parameters) [6645 6653])
                            ("value" variable nil (reparse-symbol function_parameters) [6655 6660]))                          )
                        (reparse-symbol indented_block_body) [6627 6713]))                  
                :type "class")
                nil [6047 6713]))          
      :file "log.py"
      :pointmax 6713
      :fsize 6712
      :lastmodtime '(22796 39176 942821 0)
      :unmatched-syntax nil))
  :file "!home!philip!dev!search!env_search!lib!python2.7!site-packages!sqlalchemy!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
